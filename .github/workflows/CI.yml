name: CI

on: [push, pull_request]

jobs:
  Build:
    name: Ex1 (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          environment-file: ci/environment.yml
          python-version: ${{ matrix.python-version }}
          auto-activate-base: false

      - name: Install Windows Conda Packages
        if: contains(matrix.os, 'windows')
        shell: bash -l {0}
        run: conda install m2-bison=3.0.4

      - name: Install Linux / macOS Conda Packages
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        shell: bash -l {0}
        run: conda install bison=3.4

      - name: Conda info
        shell: bash -l {0}
        run: |
            conda info
            conda list

      - name: Setup Platform (Linux)
        if: contains(matrix.os, 'ubuntu')
        shell: bash -l {0}
        run: |
            export LFORTRAN_CMAKE_GENERATOR="Unix Makefiles"
            export WIN=0
            export MACOS=0

      - name: Setup Platform (macOS)
        if: contains(matrix.os, 'macos')
        shell: bash -l {0}
        run: |
            export LFORTRAN_CMAKE_GENERATOR="Unix Makefiles"
            export WIN=0
            export MACOS=1

      - name: Setup Platform (Windows)
        if: contains(matrix.os, 'windows')
        shell: bash -l {0}
        run: |
            export LFORTRAN_CMAKE_GENERATOR="Ninja"
            export WIN=1
            export MACOS=0

      - name: Build and test
        shell: bash -l {0}
        run: |
            echo $CONDA_PREFIX
            xonsh ci/build.xsh
