; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [7 x i8] c"aabbcc\00", align 1
@1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@3 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define void @_lpython_main_program() {
.entry:
  call void @main0()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @main0() {
.entry:
  %__explicit_iterator = alloca i32, align 4
  %c = alloca i8*, align 8
  store i8* null, i8** %c, align 8
  %s = alloca i8*, align 8
  store i8* null, i8** %s, align 8
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i32 0, i32 0), i8** %s, align 8
  store i32 -1, i32* %__explicit_iterator, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %__explicit_iterator, align 4
  %1 = add i32 %0, 1
  %2 = load i8*, i8** %s, align 8
  %3 = alloca i8*, align 8
  store i8* %2, i8** %3, align 8
  %4 = call i32 @_lfortran_str_len(i8** %3)
  %5 = sub i32 %4, 1
  %6 = icmp sle i32 %1, %5
  br i1 %6, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %7 = load i32, i32* %__explicit_iterator, align 4
  %8 = add i32 %7, 1
  store i32 %8, i32* %__explicit_iterator, align 4
  %9 = load i32, i32* %__explicit_iterator, align 4
  %10 = add i32 %9, 1
  %11 = load i8*, i8** %s, align 8
  %12 = call i8* @_lfortran_str_copy(i8* %11, i32 %10, i32 %10)
  store i8* %12, i8** %c, align 8
  %13 = load i8*, i8** %c, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  br label %return

return:                                           ; preds = %loop.end
  ret void
}

declare i32 @_lfortran_str_len(i8**)

declare i8* @_lfortran_str_copy(i8*, i32, i32)

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}
