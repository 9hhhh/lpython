#define blocksize 128

//Pass by value variables found in the loop body:  scalar
//Pass by reference variables found in the loop body:  b a c
__global__ void Tempkernelname(int N, float scalar, float *b, float *a, float *c){
    int i = blockIDx.x*blockDim.x+threadIdx.x;
    if (i >= N) return;
    c[i] = (a[i]) + ((scalar)*(b[i]));
}

void triad(float *a, size_t a_size, float *b, size_t b_size, float scalar, 
float *c, size_t c_size)
{
    size_t N;
    size_t i;
    N = a_size;
    int gridsize = (N + blocksize - 1)/blocksize;
    float *b_d;
    hipMalloc(&b_d, N*sizeof(float));
    hipMemcpy(b_d, b, N*sizeof(float), hipMemcpyHostToDevice);
    float *a_d;
    hipMalloc(&a_d, N*sizeof(float));
    hipMemcpy(a_d, a, N*sizeof(float), hipMemcpyHostToDevice);
    float *c_d;
    hipMalloc(&c_d, N*sizeof(float));
    hipMemcpy(c_d, c, N*sizeof(float), hipMemcpyHostToDevice);
    hipLaunchKernelGGL(Tempkernelname, dim3(gridsize), dim3(blocksize), 0, 0, N, scalar, b_d, a_d, c_d);

}

