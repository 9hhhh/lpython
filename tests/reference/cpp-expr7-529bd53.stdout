#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

void _lfortran_main_program()
{
    main0();
}

void main0()
{
    double c;
    test_pow();
    c = test_pow_1(1, 2);
}

void test_pow()
{
    double a;
    a = pow(2, 2);
}

float test_pow_1(int a, int b)
{
    double _lpython_return_variable;
    double res;
    res = pow(a, b);
    _lpython_return_variable = res;
    return _lpython_return_variable;
}

float pow(int x, int y)
{
    double _lpython_return_variable;
    _lpython_return_variable = 1.000000*(float)(std::pow(x, y));
    return _lpython_return_variable;
}

namespace {

void main2() {
        _lfortran_main_program();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
