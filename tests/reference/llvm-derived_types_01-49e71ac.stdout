; ModuleID = 'LFortran'
source_filename = "LFortran"

%X = type { i32, float }
%Z = type { %complex_4, %Y }
%complex_4 = type { float, float }
%Y = type { %complex_4, %X }

@0 = private unnamed_addr constant [7 x i8] c"%d %f\0A\00", align 1
@1 = private unnamed_addr constant [7 x i8] c"%d %f\0A\00", align 1
@2 = private unnamed_addr constant [15 x i8] c"%f %d (%f,%f)\0A\00", align 1
@3 = private unnamed_addr constant [15 x i8] c"%f %d (%f,%f)\0A\00", align 1

define void @__module_a_01_set(%X* %a) {
.entry:
  ret void
}

define i32 @main() {
.entry:
  %b = alloca %X, align 8
  %c = alloca %Z, align 8
  %0 = getelementptr %X, %X* %b, i32 0, i32 0
  store i32 5, i32* %0, align 4
  %1 = getelementptr %X, %X* %b, i32 0, i32 1
  store float 3.500000e+00, float* %1, align 4
  %2 = getelementptr %X, %X* %b, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr %X, %X* %b, i32 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @0, i32 0, i32 0), i32 %3, double %6)
  call void @__module_a_01_set(%X* %b)
  %7 = getelementptr %X, %X* %b, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr %X, %X* %b, i32 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = fpext float %10 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i32 0, i32 0), i32 %8, double %11)
  %12 = getelementptr %Z, %Z* %c, i32 0, i32 1
  %13 = getelementptr %Y, %Y* %12, i32 0, i32 1
  %14 = getelementptr %X, %X* %13, i32 0, i32 1
  store float 2.000000e+00, float* %14, align 4
  %15 = getelementptr %Z, %Z* %c, i32 0, i32 1
  %16 = getelementptr %Y, %Y* %15, i32 0, i32 1
  %17 = getelementptr %X, %X* %16, i32 0, i32 0
  store i32 2, i32* %17, align 4
  %18 = getelementptr %Z, %Z* %c, i32 0, i32 0
  %19 = alloca %complex_4, align 8
  %20 = getelementptr %complex_4, %complex_4* %19, i32 0, i32 0
  %21 = getelementptr %complex_4, %complex_4* %19, i32 0, i32 1
  store float 2.000000e+00, float* %20, align 4
  store float 2.000000e+00, float* %21, align 4
  %22 = load %complex_4, %complex_4* %19, align 4
  store %complex_4 %22, %complex_4* %18, align 4
  %23 = getelementptr %Z, %Z* %c, i32 0, i32 1
  %24 = getelementptr %Y, %Y* %23, i32 0, i32 1
  %25 = getelementptr %X, %X* %24, i32 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  %28 = getelementptr %Z, %Z* %c, i32 0, i32 1
  %29 = getelementptr %Y, %Y* %28, i32 0, i32 1
  %30 = getelementptr %X, %X* %29, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr %Z, %Z* %c, i32 0, i32 0
  %33 = load %complex_4, %complex_4* %32, align 4
  %34 = alloca %complex_4, align 8
  store %complex_4 %33, %complex_4* %34, align 4
  %35 = getelementptr %complex_4, %complex_4* %34, i32 0, i32 0
  %36 = load float, float* %35, align 4
  %37 = fpext float %36 to double
  %38 = alloca %complex_4, align 8
  store %complex_4 %33, %complex_4* %38, align 4
  %39 = getelementptr %complex_4, %complex_4* %38, i32 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = fpext float %40 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @2, i32 0, i32 0), double %27, i32 %31, double %37, double %41)
  %42 = getelementptr %Z, %Z* %c, i32 0, i32 1
  %43 = getelementptr %Y, %Y* %42, i32 0, i32 1
  %44 = load %X, %X* %43, align 4
  %45 = alloca %X, align 8
  store %X %44, %X* %45, align 4
  call void @__module_a_01_set(%X* %45)
  %46 = getelementptr %Z, %Z* %c, i32 0, i32 1
  %47 = getelementptr %Y, %Y* %46, i32 0, i32 1
  %48 = getelementptr %X, %X* %47, i32 0, i32 1
  %49 = load float, float* %48, align 4
  %50 = fpext float %49 to double
  %51 = getelementptr %Z, %Z* %c, i32 0, i32 1
  %52 = getelementptr %Y, %Y* %51, i32 0, i32 1
  %53 = getelementptr %X, %X* %52, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr %Z, %Z* %c, i32 0, i32 0
  %56 = load %complex_4, %complex_4* %55, align 4
  %57 = alloca %complex_4, align 8
  store %complex_4 %56, %complex_4* %57, align 4
  %58 = getelementptr %complex_4, %complex_4* %57, i32 0, i32 0
  %59 = load float, float* %58, align 4
  %60 = fpext float %59 to double
  %61 = alloca %complex_4, align 8
  store %complex_4 %56, %complex_4* %61, align 4
  %62 = getelementptr %complex_4, %complex_4* %61, i32 0, i32 1
  %63 = load float, float* %62, align 4
  %64 = fpext float %63 to double
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @3, i32 0, i32 0), double %50, i32 %54, double %60, double %64)
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

