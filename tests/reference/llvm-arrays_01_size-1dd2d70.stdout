; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { [0 x i32], i32, [1 x %dimension_descriptor] }
%dimension_descriptor = type { i32, i32, i32, i32 }
%size_arg = type { %dimension_descriptor*, i32 }
%array.0 = type { [3 x i32], i32, [1 x %dimension_descriptor] }
%array.1 = type { [4 x i32], i32, [1 x %dimension_descriptor] }

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@9 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@10 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@11 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

declare i1 @__module_lfortran_intrinsic_array_allocated(%array*)

define i32 @__module_lfortran_intrinsic_array_lbound(%dimension_descriptor** %x, i32* %dim) {
.entry:
  %r = alloca i32, align 4
  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8
  %1 = load i32, i32* %dim, align 4
  %2 = sub i32 %1, 1
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 1
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %r, align 4
  %6 = load i32, i32* %r, align 4
  ret i32 %6
}

declare i32 @__module_lfortran_intrinsic_array_max(i32*, i32*)

declare i32 @__module_lfortran_intrinsic_array_min(i32*, i32*)

define i32 @__module_lfortran_intrinsic_array_size(%size_arg* %x) {
.entry:
  %r = alloca i32, align 4
  %0 = getelementptr %size_arg, %size_arg* %x, i32 0, i32 0
  %1 = load %dimension_descriptor*, %dimension_descriptor** %0, align 8
  %2 = getelementptr %size_arg, %size_arg* %x, i32 0, i32 1
  %3 = load i32, i32* %2, align 4
  store i32 1, i32* %r, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %5, %3
  br i1 %6, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %r, align 4
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %1, i32 %7
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %8, %11
  store i32 %12, i32* %r, align 4
  %13 = add i32 %7, 1
  store i32 %13, i32* %4, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %14 = load i32, i32* %r, align 4
  ret i32 %14
}

define i32 @__module_lfortran_intrinsic_array_ubound(%dimension_descriptor** %x, i32* %dim) {
.entry:
  %r = alloca i32, align 4
  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8
  %1 = load i32, i32* %dim, align 4
  %2 = sub i32 %1, 1
  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %r, align 4
  %6 = load i32, i32* %r, align 4
  ret i32 %6
}

define i32 @main() {
.entry:
  %a = alloca %array.0, align 8
  %0 = getelementptr %array.0, %array.0* %a, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array.0, %array.0* %a, i32 0, i32 2
  %2 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %1, i32 0, i32 0
  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 0
  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1
  %5 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 2
  %6 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 3
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  store i32 3, i32* %5, align 4
  %7 = load i32, i32* %5, align 4
  %8 = load i32, i32* %4, align 4
  %9 = sub i32 %7, %8
  %10 = add i32 %9, 1
  store i32 %10, i32* %6, align 4
  %b = alloca %array.1, align 8
  %11 = getelementptr %array.1, %array.1* %b, i32 0, i32 1
  store i32 0, i32* %11, align 4
  %12 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %13 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %12, i32 0, i32 0
  %14 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 0
  %15 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 1
  %16 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 2
  %17 = getelementptr %dimension_descriptor, %dimension_descriptor* %13, i32 0, i32 3
  store i32 1, i32* %14, align 4
  store i32 1, i32* %15, align 4
  store i32 4, i32* %16, align 4
  %18 = load i32, i32* %16, align 4
  %19 = load i32, i32* %15, align 4
  %20 = sub i32 %18, %19
  %21 = add i32 %20, 1
  store i32 %21, i32* %17, align 4
  %i = alloca i32, align 4
  %size_a = alloca i32, align 4
  %size_b = alloca i32, align 4
  %22 = alloca %size_arg, align 8
  %23 = getelementptr %array.0, %array.0* %a, i32 0, i32 2
  %24 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %23, i32 0, i32 0
  %25 = getelementptr %size_arg, %size_arg* %22, i32 0, i32 0
  store %dimension_descriptor* %24, %dimension_descriptor** %25, align 8
  %26 = getelementptr %size_arg, %size_arg* %22, i32 0, i32 1
  store i32 1, i32* %26, align 4
  %27 = call i32 @__module_lfortran_intrinsic_array_size(%size_arg* %22)
  store i32 %27, i32* %size_a, align 4
  %28 = alloca %size_arg, align 8
  %29 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %30 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %29, i32 0, i32 0
  %31 = getelementptr %size_arg, %size_arg* %28, i32 0, i32 0
  store %dimension_descriptor* %30, %dimension_descriptor** %31, align 8
  %32 = getelementptr %size_arg, %size_arg* %28, i32 0, i32 1
  store i32 1, i32* %32, align 4
  %33 = call i32 @__module_lfortran_intrinsic_array_size(%size_arg* %28)
  store i32 %33, i32* %size_b, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %34 = load i32, i32* %i, align 4
  %35 = add i32 %34, 1
  %36 = load i32, i32* %size_a, align 4
  %37 = icmp sle i32 %35, %36
  br i1 %37, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %38 = load i32, i32* %i, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %i, align 4
  %40 = getelementptr %array.0, %array.0* %a, i32 0, i32 2
  %41 = load i32, i32* %i, align 4
  %42 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %40, i32 0, i32 0
  %43 = getelementptr %dimension_descriptor, %dimension_descriptor* %42, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = sub i32 %41, %44
  %46 = mul i32 1, %45
  %47 = add i32 0, %46
  %48 = getelementptr %dimension_descriptor, %dimension_descriptor* %42, i32 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = mul i32 1, %49
  %51 = getelementptr %array.0, %array.0* %a, i32 0, i32 0
  %52 = getelementptr [3 x i32], [3 x i32]* %51, i32 0, i32 0
  %53 = getelementptr inbounds i32, i32* %52, i32 %47
  %54 = load i32, i32* %i, align 4
  %55 = add i32 %54, 10
  store i32 %55, i32* %53, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %56 = getelementptr %array.0, %array.0* %a, i32 0, i32 2
  %57 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %56, i32 0, i32 0
  %58 = getelementptr %dimension_descriptor, %dimension_descriptor* %57, i32 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = sub i32 1, %59
  %61 = mul i32 1, %60
  %62 = add i32 0, %61
  %63 = getelementptr %dimension_descriptor, %dimension_descriptor* %57, i32 0, i32 3
  %64 = load i32, i32* %63, align 4
  %65 = mul i32 1, %64
  %66 = getelementptr %array.0, %array.0* %a, i32 0, i32 0
  %67 = getelementptr [3 x i32], [3 x i32]* %66, i32 0, i32 0
  %68 = getelementptr inbounds i32, i32* %67, i32 %62
  %69 = load i32, i32* %68, align 4
  %70 = icmp ne i32 %69, 11
  br i1 %70, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  %71 = getelementptr %array.0, %array.0* %a, i32 0, i32 2
  %72 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %71, i32 0, i32 0
  %73 = getelementptr %dimension_descriptor, %dimension_descriptor* %72, i32 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = sub i32 2, %74
  %76 = mul i32 1, %75
  %77 = add i32 0, %76
  %78 = getelementptr %dimension_descriptor, %dimension_descriptor* %72, i32 0, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = mul i32 1, %79
  %81 = getelementptr %array.0, %array.0* %a, i32 0, i32 0
  %82 = getelementptr [3 x i32], [3 x i32]* %81, i32 0, i32 0
  %83 = getelementptr inbounds i32, i32* %82, i32 %77
  %84 = load i32, i32* %83, align 4
  %85 = icmp ne i32 %84, 12
  br i1 %85, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %iftmp4 = phi i32 [ 1, %then1 ], [ 2, %else2 ]
  %86 = getelementptr %array.0, %array.0* %a, i32 0, i32 2
  %87 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %86, i32 0, i32 0
  %88 = getelementptr %dimension_descriptor, %dimension_descriptor* %87, i32 0, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = sub i32 3, %89
  %91 = mul i32 1, %90
  %92 = add i32 0, %91
  %93 = getelementptr %dimension_descriptor, %dimension_descriptor* %87, i32 0, i32 3
  %94 = load i32, i32* %93, align 4
  %95 = mul i32 1, %94
  %96 = getelementptr %array.0, %array.0* %a, i32 0, i32 0
  %97 = getelementptr [3 x i32], [3 x i32]* %96, i32 0, i32 0
  %98 = getelementptr inbounds i32, i32* %97, i32 %92
  %99 = load i32, i32* %98, align 4
  %100 = icmp ne i32 %99, 13
  br i1 %100, label %then5, label %else6

then5:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont7

else6:                                            ; preds = %ifcont3
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %iftmp8 = phi i32 [ 1, %then5 ], [ 2, %else6 ]
  store i32 10, i32* %i, align 4
  br label %loop.head9

loop.head9:                                       ; preds = %loop.body10, %ifcont7
  %101 = load i32, i32* %i, align 4
  %102 = add i32 %101, 1
  %103 = load i32, i32* %size_b, align 4
  %104 = add i32 10, %103
  %105 = icmp sle i32 %102, %104
  br i1 %105, label %loop.body10, label %loop.end11

loop.body10:                                      ; preds = %loop.head9
  %106 = load i32, i32* %i, align 4
  %107 = add i32 %106, 1
  store i32 %107, i32* %i, align 4
  %108 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %109 = load i32, i32* %i, align 4
  %110 = sub i32 %109, 10
  %111 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %108, i32 0, i32 0
  %112 = getelementptr %dimension_descriptor, %dimension_descriptor* %111, i32 0, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = sub i32 %110, %113
  %115 = mul i32 1, %114
  %116 = add i32 0, %115
  %117 = getelementptr %dimension_descriptor, %dimension_descriptor* %111, i32 0, i32 3
  %118 = load i32, i32* %117, align 4
  %119 = mul i32 1, %118
  %120 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %121 = getelementptr [4 x i32], [4 x i32]* %120, i32 0, i32 0
  %122 = getelementptr inbounds i32, i32* %121, i32 %116
  %123 = load i32, i32* %i, align 4
  store i32 %123, i32* %122, align 4
  br label %loop.head9

loop.end11:                                       ; preds = %loop.head9
  %124 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %125 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %124, i32 0, i32 0
  %126 = getelementptr %dimension_descriptor, %dimension_descriptor* %125, i32 0, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = sub i32 1, %127
  %129 = mul i32 1, %128
  %130 = add i32 0, %129
  %131 = getelementptr %dimension_descriptor, %dimension_descriptor* %125, i32 0, i32 3
  %132 = load i32, i32* %131, align 4
  %133 = mul i32 1, %132
  %134 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %135 = getelementptr [4 x i32], [4 x i32]* %134, i32 0, i32 0
  %136 = getelementptr inbounds i32, i32* %135, i32 %130
  %137 = load i32, i32* %136, align 4
  %138 = icmp ne i32 %137, 11
  br i1 %138, label %then12, label %else13

then12:                                           ; preds = %loop.end11
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont14

else13:                                           ; preds = %loop.end11
  br label %ifcont14

ifcont14:                                         ; preds = %else13, %then12
  %iftmp15 = phi i32 [ 1, %then12 ], [ 2, %else13 ]
  %139 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %140 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %139, i32 0, i32 0
  %141 = getelementptr %dimension_descriptor, %dimension_descriptor* %140, i32 0, i32 1
  %142 = load i32, i32* %141, align 4
  %143 = sub i32 2, %142
  %144 = mul i32 1, %143
  %145 = add i32 0, %144
  %146 = getelementptr %dimension_descriptor, %dimension_descriptor* %140, i32 0, i32 3
  %147 = load i32, i32* %146, align 4
  %148 = mul i32 1, %147
  %149 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %150 = getelementptr [4 x i32], [4 x i32]* %149, i32 0, i32 0
  %151 = getelementptr inbounds i32, i32* %150, i32 %145
  %152 = load i32, i32* %151, align 4
  %153 = icmp ne i32 %152, 12
  br i1 %153, label %then16, label %else17

then16:                                           ; preds = %ifcont14
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont18

else17:                                           ; preds = %ifcont14
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  %iftmp19 = phi i32 [ 1, %then16 ], [ 2, %else17 ]
  %154 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %155 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %154, i32 0, i32 0
  %156 = getelementptr %dimension_descriptor, %dimension_descriptor* %155, i32 0, i32 1
  %157 = load i32, i32* %156, align 4
  %158 = sub i32 3, %157
  %159 = mul i32 1, %158
  %160 = add i32 0, %159
  %161 = getelementptr %dimension_descriptor, %dimension_descriptor* %155, i32 0, i32 3
  %162 = load i32, i32* %161, align 4
  %163 = mul i32 1, %162
  %164 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %165 = getelementptr [4 x i32], [4 x i32]* %164, i32 0, i32 0
  %166 = getelementptr inbounds i32, i32* %165, i32 %160
  %167 = load i32, i32* %166, align 4
  %168 = icmp ne i32 %167, 13
  br i1 %168, label %then20, label %else21

then20:                                           ; preds = %ifcont18
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont22

else21:                                           ; preds = %ifcont18
  br label %ifcont22

ifcont22:                                         ; preds = %else21, %then20
  %iftmp23 = phi i32 [ 1, %then20 ], [ 2, %else21 ]
  %169 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %170 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %169, i32 0, i32 0
  %171 = getelementptr %dimension_descriptor, %dimension_descriptor* %170, i32 0, i32 1
  %172 = load i32, i32* %171, align 4
  %173 = sub i32 4, %172
  %174 = mul i32 1, %173
  %175 = add i32 0, %174
  %176 = getelementptr %dimension_descriptor, %dimension_descriptor* %170, i32 0, i32 3
  %177 = load i32, i32* %176, align 4
  %178 = mul i32 1, %177
  %179 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %180 = getelementptr [4 x i32], [4 x i32]* %179, i32 0, i32 0
  %181 = getelementptr inbounds i32, i32* %180, i32 %175
  %182 = load i32, i32* %181, align 4
  %183 = icmp ne i32 %182, 14
  br i1 %183, label %then24, label %else25

then24:                                           ; preds = %ifcont22
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont26

else25:                                           ; preds = %ifcont22
  br label %ifcont26

ifcont26:                                         ; preds = %else25, %then24
  %iftmp27 = phi i32 [ 1, %then24 ], [ 2, %else25 ]
  store i32 0, i32* %i, align 4
  br label %loop.head28

loop.head28:                                      ; preds = %loop.body29, %ifcont26
  %184 = load i32, i32* %i, align 4
  %185 = add i32 %184, 1
  %186 = load i32, i32* %size_a, align 4
  %187 = icmp sle i32 %185, %186
  br i1 %187, label %loop.body29, label %loop.end30

loop.body29:                                      ; preds = %loop.head28
  %188 = load i32, i32* %i, align 4
  %189 = add i32 %188, 1
  store i32 %189, i32* %i, align 4
  %190 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %191 = load i32, i32* %i, align 4
  %192 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %190, i32 0, i32 0
  %193 = getelementptr %dimension_descriptor, %dimension_descriptor* %192, i32 0, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = sub i32 %191, %194
  %196 = mul i32 1, %195
  %197 = add i32 0, %196
  %198 = getelementptr %dimension_descriptor, %dimension_descriptor* %192, i32 0, i32 3
  %199 = load i32, i32* %198, align 4
  %200 = mul i32 1, %199
  %201 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %202 = getelementptr [4 x i32], [4 x i32]* %201, i32 0, i32 0
  %203 = getelementptr inbounds i32, i32* %202, i32 %197
  %204 = getelementptr %array.0, %array.0* %a, i32 0, i32 2
  %205 = load i32, i32* %i, align 4
  %206 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %204, i32 0, i32 0
  %207 = getelementptr %dimension_descriptor, %dimension_descriptor* %206, i32 0, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = sub i32 %205, %208
  %210 = mul i32 1, %209
  %211 = add i32 0, %210
  %212 = getelementptr %dimension_descriptor, %dimension_descriptor* %206, i32 0, i32 3
  %213 = load i32, i32* %212, align 4
  %214 = mul i32 1, %213
  %215 = getelementptr %array.0, %array.0* %a, i32 0, i32 0
  %216 = getelementptr [3 x i32], [3 x i32]* %215, i32 0, i32 0
  %217 = getelementptr inbounds i32, i32* %216, i32 %211
  %218 = load i32, i32* %217, align 4
  %219 = sub i32 %218, 10
  store i32 %219, i32* %203, align 4
  br label %loop.head28

loop.end30:                                       ; preds = %loop.head28
  %220 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %221 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %220, i32 0, i32 0
  %222 = getelementptr %dimension_descriptor, %dimension_descriptor* %221, i32 0, i32 1
  %223 = load i32, i32* %222, align 4
  %224 = sub i32 1, %223
  %225 = mul i32 1, %224
  %226 = add i32 0, %225
  %227 = getelementptr %dimension_descriptor, %dimension_descriptor* %221, i32 0, i32 3
  %228 = load i32, i32* %227, align 4
  %229 = mul i32 1, %228
  %230 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %231 = getelementptr [4 x i32], [4 x i32]* %230, i32 0, i32 0
  %232 = getelementptr inbounds i32, i32* %231, i32 %226
  %233 = load i32, i32* %232, align 4
  %234 = icmp ne i32 %233, 1
  br i1 %234, label %then31, label %else32

then31:                                           ; preds = %loop.end30
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont33

else32:                                           ; preds = %loop.end30
  br label %ifcont33

ifcont33:                                         ; preds = %else32, %then31
  %iftmp34 = phi i32 [ 1, %then31 ], [ 2, %else32 ]
  %235 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %236 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %235, i32 0, i32 0
  %237 = getelementptr %dimension_descriptor, %dimension_descriptor* %236, i32 0, i32 1
  %238 = load i32, i32* %237, align 4
  %239 = sub i32 2, %238
  %240 = mul i32 1, %239
  %241 = add i32 0, %240
  %242 = getelementptr %dimension_descriptor, %dimension_descriptor* %236, i32 0, i32 3
  %243 = load i32, i32* %242, align 4
  %244 = mul i32 1, %243
  %245 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %246 = getelementptr [4 x i32], [4 x i32]* %245, i32 0, i32 0
  %247 = getelementptr inbounds i32, i32* %246, i32 %241
  %248 = load i32, i32* %247, align 4
  %249 = icmp ne i32 %248, 2
  br i1 %249, label %then35, label %else36

then35:                                           ; preds = %ifcont33
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont37

else36:                                           ; preds = %ifcont33
  br label %ifcont37

ifcont37:                                         ; preds = %else36, %then35
  %iftmp38 = phi i32 [ 1, %then35 ], [ 2, %else36 ]
  %250 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %251 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %250, i32 0, i32 0
  %252 = getelementptr %dimension_descriptor, %dimension_descriptor* %251, i32 0, i32 1
  %253 = load i32, i32* %252, align 4
  %254 = sub i32 3, %253
  %255 = mul i32 1, %254
  %256 = add i32 0, %255
  %257 = getelementptr %dimension_descriptor, %dimension_descriptor* %251, i32 0, i32 3
  %258 = load i32, i32* %257, align 4
  %259 = mul i32 1, %258
  %260 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %261 = getelementptr [4 x i32], [4 x i32]* %260, i32 0, i32 0
  %262 = getelementptr inbounds i32, i32* %261, i32 %256
  %263 = load i32, i32* %262, align 4
  %264 = icmp ne i32 %263, 3
  br i1 %264, label %then39, label %else40

then39:                                           ; preds = %ifcont37
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont41

else40:                                           ; preds = %ifcont37
  br label %ifcont41

ifcont41:                                         ; preds = %else40, %then39
  %iftmp42 = phi i32 [ 1, %then39 ], [ 2, %else40 ]
  %265 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %266 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %265, i32 0, i32 0
  %267 = getelementptr %dimension_descriptor, %dimension_descriptor* %266, i32 0, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = sub i32 4, %268
  %270 = mul i32 1, %269
  %271 = add i32 0, %270
  %272 = getelementptr %dimension_descriptor, %dimension_descriptor* %266, i32 0, i32 3
  %273 = load i32, i32* %272, align 4
  %274 = mul i32 1, %273
  %275 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %276 = getelementptr [4 x i32], [4 x i32]* %275, i32 0, i32 0
  %277 = getelementptr inbounds i32, i32* %276, i32 %271
  %278 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %279 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %278, i32 0, i32 0
  %280 = getelementptr %dimension_descriptor, %dimension_descriptor* %279, i32 0, i32 1
  %281 = load i32, i32* %280, align 4
  %282 = sub i32 1, %281
  %283 = mul i32 1, %282
  %284 = add i32 0, %283
  %285 = getelementptr %dimension_descriptor, %dimension_descriptor* %279, i32 0, i32 3
  %286 = load i32, i32* %285, align 4
  %287 = mul i32 1, %286
  %288 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %289 = getelementptr [4 x i32], [4 x i32]* %288, i32 0, i32 0
  %290 = getelementptr inbounds i32, i32* %289, i32 %284
  %291 = load i32, i32* %290, align 4
  %292 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %293 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %292, i32 0, i32 0
  %294 = getelementptr %dimension_descriptor, %dimension_descriptor* %293, i32 0, i32 1
  %295 = load i32, i32* %294, align 4
  %296 = sub i32 2, %295
  %297 = mul i32 1, %296
  %298 = add i32 0, %297
  %299 = getelementptr %dimension_descriptor, %dimension_descriptor* %293, i32 0, i32 3
  %300 = load i32, i32* %299, align 4
  %301 = mul i32 1, %300
  %302 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %303 = getelementptr [4 x i32], [4 x i32]* %302, i32 0, i32 0
  %304 = getelementptr inbounds i32, i32* %303, i32 %298
  %305 = load i32, i32* %304, align 4
  %306 = add i32 %291, %305
  %307 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %308 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %307, i32 0, i32 0
  %309 = getelementptr %dimension_descriptor, %dimension_descriptor* %308, i32 0, i32 1
  %310 = load i32, i32* %309, align 4
  %311 = sub i32 3, %310
  %312 = mul i32 1, %311
  %313 = add i32 0, %312
  %314 = getelementptr %dimension_descriptor, %dimension_descriptor* %308, i32 0, i32 3
  %315 = load i32, i32* %314, align 4
  %316 = mul i32 1, %315
  %317 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %318 = getelementptr [4 x i32], [4 x i32]* %317, i32 0, i32 0
  %319 = getelementptr inbounds i32, i32* %318, i32 %313
  %320 = load i32, i32* %319, align 4
  %321 = add i32 %306, %320
  %322 = getelementptr %array.0, %array.0* %a, i32 0, i32 2
  %323 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %322, i32 0, i32 0
  %324 = getelementptr %dimension_descriptor, %dimension_descriptor* %323, i32 0, i32 1
  %325 = load i32, i32* %324, align 4
  %326 = sub i32 1, %325
  %327 = mul i32 1, %326
  %328 = add i32 0, %327
  %329 = getelementptr %dimension_descriptor, %dimension_descriptor* %323, i32 0, i32 3
  %330 = load i32, i32* %329, align 4
  %331 = mul i32 1, %330
  %332 = getelementptr %array.0, %array.0* %a, i32 0, i32 0
  %333 = getelementptr [3 x i32], [3 x i32]* %332, i32 0, i32 0
  %334 = getelementptr inbounds i32, i32* %333, i32 %328
  %335 = load i32, i32* %334, align 4
  %336 = add i32 %321, %335
  store i32 %336, i32* %277, align 4
  %337 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %338 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %337, i32 0, i32 0
  %339 = getelementptr %dimension_descriptor, %dimension_descriptor* %338, i32 0, i32 1
  %340 = load i32, i32* %339, align 4
  %341 = sub i32 4, %340
  %342 = mul i32 1, %341
  %343 = add i32 0, %342
  %344 = getelementptr %dimension_descriptor, %dimension_descriptor* %338, i32 0, i32 3
  %345 = load i32, i32* %344, align 4
  %346 = mul i32 1, %345
  %347 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %348 = getelementptr [4 x i32], [4 x i32]* %347, i32 0, i32 0
  %349 = getelementptr inbounds i32, i32* %348, i32 %343
  %350 = load i32, i32* %349, align 4
  %351 = icmp ne i32 %350, 17
  br i1 %351, label %then43, label %else44

then43:                                           ; preds = %ifcont41
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont45

else44:                                           ; preds = %ifcont41
  br label %ifcont45

ifcont45:                                         ; preds = %else44, %then43
  %iftmp46 = phi i32 [ 1, %then43 ], [ 2, %else44 ]
  %352 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %353 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %352, i32 0, i32 0
  %354 = getelementptr %dimension_descriptor, %dimension_descriptor* %353, i32 0, i32 1
  %355 = load i32, i32* %354, align 4
  %356 = sub i32 4, %355
  %357 = mul i32 1, %356
  %358 = add i32 0, %357
  %359 = getelementptr %dimension_descriptor, %dimension_descriptor* %353, i32 0, i32 3
  %360 = load i32, i32* %359, align 4
  %361 = mul i32 1, %360
  %362 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %363 = getelementptr [4 x i32], [4 x i32]* %362, i32 0, i32 0
  %364 = getelementptr inbounds i32, i32* %363, i32 %358
  %365 = getelementptr %array.0, %array.0* %a, i32 0, i32 2
  %366 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %365, i32 0, i32 0
  %367 = getelementptr %dimension_descriptor, %dimension_descriptor* %366, i32 0, i32 1
  %368 = load i32, i32* %367, align 4
  %369 = sub i32 1, %368
  %370 = mul i32 1, %369
  %371 = add i32 0, %370
  %372 = getelementptr %dimension_descriptor, %dimension_descriptor* %366, i32 0, i32 3
  %373 = load i32, i32* %372, align 4
  %374 = mul i32 1, %373
  %375 = getelementptr %array.0, %array.0* %a, i32 0, i32 0
  %376 = getelementptr [3 x i32], [3 x i32]* %375, i32 0, i32 0
  %377 = getelementptr inbounds i32, i32* %376, i32 %371
  %378 = load i32, i32* %377, align 4
  store i32 %378, i32* %364, align 4
  %379 = getelementptr %array.1, %array.1* %b, i32 0, i32 2
  %380 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %379, i32 0, i32 0
  %381 = getelementptr %dimension_descriptor, %dimension_descriptor* %380, i32 0, i32 1
  %382 = load i32, i32* %381, align 4
  %383 = sub i32 4, %382
  %384 = mul i32 1, %383
  %385 = add i32 0, %384
  %386 = getelementptr %dimension_descriptor, %dimension_descriptor* %380, i32 0, i32 3
  %387 = load i32, i32* %386, align 4
  %388 = mul i32 1, %387
  %389 = getelementptr %array.1, %array.1* %b, i32 0, i32 0
  %390 = getelementptr [4 x i32], [4 x i32]* %389, i32 0, i32 0
  %391 = getelementptr inbounds i32, i32* %390, i32 %385
  %392 = load i32, i32* %391, align 4
  %393 = icmp ne i32 %392, 11
  br i1 %393, label %then47, label %else48

then47:                                           ; preds = %ifcont45
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @11, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont49

else48:                                           ; preds = %ifcont45
  br label %ifcont49

ifcont49:                                         ; preds = %else48, %then47
  %iftmp50 = phi i32 [ 1, %then47 ], [ 2, %else48 ]
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

