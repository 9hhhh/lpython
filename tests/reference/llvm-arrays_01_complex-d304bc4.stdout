; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { [3 x %complex_4], i32, [1 x %dimension_descriptor] }
%complex_4 = type { float, float }
%dimension_descriptor = type { i32, i32, i32, i32 }
%array.0 = type { [4 x %complex_4], i32, [1 x %dimension_descriptor] }
%array.1 = type { [4 x %complex_4], i32, [2 x %dimension_descriptor] }

@0 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@1 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@2 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@3 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@4 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@5 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@6 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@7 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@9 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@10 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@11 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@12 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@13 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@14 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1
@15 = private unnamed_addr constant [12 x i8] c"ERROR STOP\0A\00", align 1

define i32 @main() {
.entry:
  %a = alloca %array, align 8
  %b = alloca %array.0, align 8
  %c = alloca %array.1, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %loop.head

loop.head:                                        ; preds = %loop.body, %.entry
  %0 = load i32, i32* %i, align 4
  %1 = add i32 %0, 1
  %2 = icmp sle i32 %1, 3
  br i1 %2, label %loop.body, label %loop.end

loop.body:                                        ; preds = %loop.head
  %3 = load i32, i32* %i, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %i, align 4
  %5 = getelementptr %array, %array* %a, i32 0, i32 2
  %6 = load i32, i32* %i, align 4
  %7 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %5, i32 0, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = sub i32 %6, %9
  %11 = mul i32 1, %10
  %12 = add i32 0, %11
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = mul i32 1, %14
  %16 = getelementptr %array, %array* %a, i32 0, i32 0
  %17 = getelementptr [3 x %complex_4], [3 x %complex_4]* %16, i32 0, i32 %12
  %18 = load i32, i32* %i, align 4
  %19 = add i32 %18, 10
  %20 = sitofp i32 %19 to float
  %21 = alloca %complex_4, align 8
  %22 = getelementptr %complex_4, %complex_4* %21, i32 0, i32 0
  %23 = getelementptr %complex_4, %complex_4* %21, i32 0, i32 1
  store float %20, float* %22, align 4
  store float 0.000000e+00, float* %23, align 4
  %24 = load %complex_4, %complex_4* %21, align 4
  store %complex_4 %24, %complex_4* %17, align 4
  br label %loop.head

loop.end:                                         ; preds = %loop.head
  %25 = getelementptr %array, %array* %a, i32 0, i32 2
  %26 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %25, i32 0, i32 0
  %27 = getelementptr %dimension_descriptor, %dimension_descriptor* %26, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = sub i32 1, %28
  %30 = mul i32 1, %29
  %31 = add i32 0, %30
  %32 = getelementptr %dimension_descriptor, %dimension_descriptor* %26, i32 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = mul i32 1, %33
  %35 = getelementptr %array, %array* %a, i32 0, i32 0
  %36 = getelementptr [3 x %complex_4], [3 x %complex_4]* %35, i32 0, i32 %31
  %37 = load %complex_4, %complex_4* %36, align 4
  %38 = alloca %complex_4, align 8
  %39 = getelementptr %complex_4, %complex_4* %38, i32 0, i32 0
  %40 = getelementptr %complex_4, %complex_4* %38, i32 0, i32 1
  store float 1.100000e+01, float* %39, align 4
  store float 0.000000e+00, float* %40, align 4
  %41 = load %complex_4, %complex_4* %38, align 4
  %42 = alloca %complex_4, align 8
  store %complex_4 %37, %complex_4* %42, align 4
  %43 = getelementptr %complex_4, %complex_4* %42, i32 0, i32 0
  %44 = load float, float* %43, align 4
  %45 = alloca %complex_4, align 8
  store %complex_4 %41, %complex_4* %45, align 4
  %46 = getelementptr %complex_4, %complex_4* %45, i32 0, i32 0
  %47 = load float, float* %46, align 4
  %48 = alloca %complex_4, align 8
  store %complex_4 %37, %complex_4* %48, align 4
  %49 = getelementptr %complex_4, %complex_4* %48, i32 0, i32 1
  %50 = load float, float* %49, align 4
  %51 = alloca %complex_4, align 8
  store %complex_4 %41, %complex_4* %51, align 4
  %52 = getelementptr %complex_4, %complex_4* %51, i32 0, i32 1
  %53 = load float, float* %52, align 4
  %54 = fcmp une float %44, %47
  %55 = fcmp une float %50, %53
  %56 = and i1 %54, %55
  br i1 %56, label %then, label %else

then:                                             ; preds = %loop.end
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %loop.end
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %iftmp = phi i32 [ 1, %then ], [ 2, %else ]
  %57 = getelementptr %array, %array* %a, i32 0, i32 2
  %58 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %57, i32 0, i32 0
  %59 = getelementptr %dimension_descriptor, %dimension_descriptor* %58, i32 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = sub i32 2, %60
  %62 = mul i32 1, %61
  %63 = add i32 0, %62
  %64 = getelementptr %dimension_descriptor, %dimension_descriptor* %58, i32 0, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = mul i32 1, %65
  %67 = getelementptr %array, %array* %a, i32 0, i32 0
  %68 = getelementptr [3 x %complex_4], [3 x %complex_4]* %67, i32 0, i32 %63
  %69 = load %complex_4, %complex_4* %68, align 4
  %70 = alloca %complex_4, align 8
  %71 = getelementptr %complex_4, %complex_4* %70, i32 0, i32 0
  %72 = getelementptr %complex_4, %complex_4* %70, i32 0, i32 1
  store float 1.200000e+01, float* %71, align 4
  store float 0.000000e+00, float* %72, align 4
  %73 = load %complex_4, %complex_4* %70, align 4
  %74 = alloca %complex_4, align 8
  store %complex_4 %69, %complex_4* %74, align 4
  %75 = getelementptr %complex_4, %complex_4* %74, i32 0, i32 0
  %76 = load float, float* %75, align 4
  %77 = alloca %complex_4, align 8
  store %complex_4 %73, %complex_4* %77, align 4
  %78 = getelementptr %complex_4, %complex_4* %77, i32 0, i32 0
  %79 = load float, float* %78, align 4
  %80 = alloca %complex_4, align 8
  store %complex_4 %69, %complex_4* %80, align 4
  %81 = getelementptr %complex_4, %complex_4* %80, i32 0, i32 1
  %82 = load float, float* %81, align 4
  %83 = alloca %complex_4, align 8
  store %complex_4 %73, %complex_4* %83, align 4
  %84 = getelementptr %complex_4, %complex_4* %83, i32 0, i32 1
  %85 = load float, float* %84, align 4
  %86 = fcmp une float %76, %79
  %87 = fcmp une float %82, %85
  %88 = and i1 %86, %87
  br i1 %88, label %then1, label %else2

then1:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

else2:                                            ; preds = %ifcont
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %iftmp4 = phi i32 [ 1, %then1 ], [ 2, %else2 ]
  %89 = getelementptr %array, %array* %a, i32 0, i32 2
  %90 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %89, i32 0, i32 0
  %91 = getelementptr %dimension_descriptor, %dimension_descriptor* %90, i32 0, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = sub i32 3, %92
  %94 = mul i32 1, %93
  %95 = add i32 0, %94
  %96 = getelementptr %dimension_descriptor, %dimension_descriptor* %90, i32 0, i32 3
  %97 = load i32, i32* %96, align 4
  %98 = mul i32 1, %97
  %99 = getelementptr %array, %array* %a, i32 0, i32 0
  %100 = getelementptr [3 x %complex_4], [3 x %complex_4]* %99, i32 0, i32 %95
  %101 = load %complex_4, %complex_4* %100, align 4
  %102 = alloca %complex_4, align 8
  %103 = getelementptr %complex_4, %complex_4* %102, i32 0, i32 0
  %104 = getelementptr %complex_4, %complex_4* %102, i32 0, i32 1
  store float 1.300000e+01, float* %103, align 4
  store float 0.000000e+00, float* %104, align 4
  %105 = load %complex_4, %complex_4* %102, align 4
  %106 = alloca %complex_4, align 8
  store %complex_4 %101, %complex_4* %106, align 4
  %107 = getelementptr %complex_4, %complex_4* %106, i32 0, i32 0
  %108 = load float, float* %107, align 4
  %109 = alloca %complex_4, align 8
  store %complex_4 %105, %complex_4* %109, align 4
  %110 = getelementptr %complex_4, %complex_4* %109, i32 0, i32 0
  %111 = load float, float* %110, align 4
  %112 = alloca %complex_4, align 8
  store %complex_4 %101, %complex_4* %112, align 4
  %113 = getelementptr %complex_4, %complex_4* %112, i32 0, i32 1
  %114 = load float, float* %113, align 4
  %115 = alloca %complex_4, align 8
  store %complex_4 %105, %complex_4* %115, align 4
  %116 = getelementptr %complex_4, %complex_4* %115, i32 0, i32 1
  %117 = load float, float* %116, align 4
  %118 = fcmp une float %108, %111
  %119 = fcmp une float %114, %117
  %120 = and i1 %118, %119
  br i1 %120, label %then5, label %else6

then5:                                            ; preds = %ifcont3
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont7

else6:                                            ; preds = %ifcont3
  br label %ifcont7

ifcont7:                                          ; preds = %else6, %then5
  %iftmp8 = phi i32 [ 1, %then5 ], [ 2, %else6 ]
  store i32 10, i32* %i, align 4
  br label %loop.head9

loop.head9:                                       ; preds = %loop.body10, %ifcont7
  %121 = load i32, i32* %i, align 4
  %122 = add i32 %121, 1
  %123 = icmp sle i32 %122, 14
  br i1 %123, label %loop.body10, label %loop.end11

loop.body10:                                      ; preds = %loop.head9
  %124 = load i32, i32* %i, align 4
  %125 = add i32 %124, 1
  store i32 %125, i32* %i, align 4
  %126 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %127 = load i32, i32* %i, align 4
  %128 = sub i32 %127, 10
  %129 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %126, i32 0, i32 0
  %130 = getelementptr %dimension_descriptor, %dimension_descriptor* %129, i32 0, i32 1
  %131 = load i32, i32* %130, align 4
  %132 = sub i32 %128, %131
  %133 = mul i32 1, %132
  %134 = add i32 0, %133
  %135 = getelementptr %dimension_descriptor, %dimension_descriptor* %129, i32 0, i32 3
  %136 = load i32, i32* %135, align 4
  %137 = mul i32 1, %136
  %138 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %139 = getelementptr [4 x %complex_4], [4 x %complex_4]* %138, i32 0, i32 %134
  %140 = load i32, i32* %i, align 4
  %141 = sitofp i32 %140 to float
  %142 = alloca %complex_4, align 8
  %143 = getelementptr %complex_4, %complex_4* %142, i32 0, i32 0
  %144 = getelementptr %complex_4, %complex_4* %142, i32 0, i32 1
  store float %141, float* %143, align 4
  store float 0.000000e+00, float* %144, align 4
  %145 = load %complex_4, %complex_4* %142, align 4
  store %complex_4 %145, %complex_4* %139, align 4
  br label %loop.head9

loop.end11:                                       ; preds = %loop.head9
  %146 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %147 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %146, i32 0, i32 0
  %148 = getelementptr %dimension_descriptor, %dimension_descriptor* %147, i32 0, i32 1
  %149 = load i32, i32* %148, align 4
  %150 = sub i32 1, %149
  %151 = mul i32 1, %150
  %152 = add i32 0, %151
  %153 = getelementptr %dimension_descriptor, %dimension_descriptor* %147, i32 0, i32 3
  %154 = load i32, i32* %153, align 4
  %155 = mul i32 1, %154
  %156 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %157 = getelementptr [4 x %complex_4], [4 x %complex_4]* %156, i32 0, i32 %152
  %158 = load %complex_4, %complex_4* %157, align 4
  %159 = alloca %complex_4, align 8
  %160 = getelementptr %complex_4, %complex_4* %159, i32 0, i32 0
  %161 = getelementptr %complex_4, %complex_4* %159, i32 0, i32 1
  store float 1.100000e+01, float* %160, align 4
  store float 0.000000e+00, float* %161, align 4
  %162 = load %complex_4, %complex_4* %159, align 4
  %163 = alloca %complex_4, align 8
  store %complex_4 %158, %complex_4* %163, align 4
  %164 = getelementptr %complex_4, %complex_4* %163, i32 0, i32 0
  %165 = load float, float* %164, align 4
  %166 = alloca %complex_4, align 8
  store %complex_4 %162, %complex_4* %166, align 4
  %167 = getelementptr %complex_4, %complex_4* %166, i32 0, i32 0
  %168 = load float, float* %167, align 4
  %169 = alloca %complex_4, align 8
  store %complex_4 %158, %complex_4* %169, align 4
  %170 = getelementptr %complex_4, %complex_4* %169, i32 0, i32 1
  %171 = load float, float* %170, align 4
  %172 = alloca %complex_4, align 8
  store %complex_4 %162, %complex_4* %172, align 4
  %173 = getelementptr %complex_4, %complex_4* %172, i32 0, i32 1
  %174 = load float, float* %173, align 4
  %175 = fcmp une float %165, %168
  %176 = fcmp une float %171, %174
  %177 = and i1 %175, %176
  br i1 %177, label %then12, label %else13

then12:                                           ; preds = %loop.end11
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont14

else13:                                           ; preds = %loop.end11
  br label %ifcont14

ifcont14:                                         ; preds = %else13, %then12
  %iftmp15 = phi i32 [ 1, %then12 ], [ 2, %else13 ]
  %178 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %179 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %178, i32 0, i32 0
  %180 = getelementptr %dimension_descriptor, %dimension_descriptor* %179, i32 0, i32 1
  %181 = load i32, i32* %180, align 4
  %182 = sub i32 2, %181
  %183 = mul i32 1, %182
  %184 = add i32 0, %183
  %185 = getelementptr %dimension_descriptor, %dimension_descriptor* %179, i32 0, i32 3
  %186 = load i32, i32* %185, align 4
  %187 = mul i32 1, %186
  %188 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %189 = getelementptr [4 x %complex_4], [4 x %complex_4]* %188, i32 0, i32 %184
  %190 = load %complex_4, %complex_4* %189, align 4
  %191 = alloca %complex_4, align 8
  %192 = getelementptr %complex_4, %complex_4* %191, i32 0, i32 0
  %193 = getelementptr %complex_4, %complex_4* %191, i32 0, i32 1
  store float 1.200000e+01, float* %192, align 4
  store float 0.000000e+00, float* %193, align 4
  %194 = load %complex_4, %complex_4* %191, align 4
  %195 = alloca %complex_4, align 8
  store %complex_4 %190, %complex_4* %195, align 4
  %196 = getelementptr %complex_4, %complex_4* %195, i32 0, i32 0
  %197 = load float, float* %196, align 4
  %198 = alloca %complex_4, align 8
  store %complex_4 %194, %complex_4* %198, align 4
  %199 = getelementptr %complex_4, %complex_4* %198, i32 0, i32 0
  %200 = load float, float* %199, align 4
  %201 = alloca %complex_4, align 8
  store %complex_4 %190, %complex_4* %201, align 4
  %202 = getelementptr %complex_4, %complex_4* %201, i32 0, i32 1
  %203 = load float, float* %202, align 4
  %204 = alloca %complex_4, align 8
  store %complex_4 %194, %complex_4* %204, align 4
  %205 = getelementptr %complex_4, %complex_4* %204, i32 0, i32 1
  %206 = load float, float* %205, align 4
  %207 = fcmp une float %197, %200
  %208 = fcmp une float %203, %206
  %209 = and i1 %207, %208
  br i1 %209, label %then16, label %else17

then16:                                           ; preds = %ifcont14
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont18

else17:                                           ; preds = %ifcont14
  br label %ifcont18

ifcont18:                                         ; preds = %else17, %then16
  %iftmp19 = phi i32 [ 1, %then16 ], [ 2, %else17 ]
  %210 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %211 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %210, i32 0, i32 0
  %212 = getelementptr %dimension_descriptor, %dimension_descriptor* %211, i32 0, i32 1
  %213 = load i32, i32* %212, align 4
  %214 = sub i32 3, %213
  %215 = mul i32 1, %214
  %216 = add i32 0, %215
  %217 = getelementptr %dimension_descriptor, %dimension_descriptor* %211, i32 0, i32 3
  %218 = load i32, i32* %217, align 4
  %219 = mul i32 1, %218
  %220 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %221 = getelementptr [4 x %complex_4], [4 x %complex_4]* %220, i32 0, i32 %216
  %222 = load %complex_4, %complex_4* %221, align 4
  %223 = alloca %complex_4, align 8
  %224 = getelementptr %complex_4, %complex_4* %223, i32 0, i32 0
  %225 = getelementptr %complex_4, %complex_4* %223, i32 0, i32 1
  store float 1.300000e+01, float* %224, align 4
  store float 0.000000e+00, float* %225, align 4
  %226 = load %complex_4, %complex_4* %223, align 4
  %227 = alloca %complex_4, align 8
  store %complex_4 %222, %complex_4* %227, align 4
  %228 = getelementptr %complex_4, %complex_4* %227, i32 0, i32 0
  %229 = load float, float* %228, align 4
  %230 = alloca %complex_4, align 8
  store %complex_4 %226, %complex_4* %230, align 4
  %231 = getelementptr %complex_4, %complex_4* %230, i32 0, i32 0
  %232 = load float, float* %231, align 4
  %233 = alloca %complex_4, align 8
  store %complex_4 %222, %complex_4* %233, align 4
  %234 = getelementptr %complex_4, %complex_4* %233, i32 0, i32 1
  %235 = load float, float* %234, align 4
  %236 = alloca %complex_4, align 8
  store %complex_4 %226, %complex_4* %236, align 4
  %237 = getelementptr %complex_4, %complex_4* %236, i32 0, i32 1
  %238 = load float, float* %237, align 4
  %239 = fcmp une float %229, %232
  %240 = fcmp une float %235, %238
  %241 = and i1 %239, %240
  br i1 %241, label %then20, label %else21

then20:                                           ; preds = %ifcont18
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @5, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont22

else21:                                           ; preds = %ifcont18
  br label %ifcont22

ifcont22:                                         ; preds = %else21, %then20
  %iftmp23 = phi i32 [ 1, %then20 ], [ 2, %else21 ]
  %242 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %243 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %242, i32 0, i32 0
  %244 = getelementptr %dimension_descriptor, %dimension_descriptor* %243, i32 0, i32 1
  %245 = load i32, i32* %244, align 4
  %246 = sub i32 4, %245
  %247 = mul i32 1, %246
  %248 = add i32 0, %247
  %249 = getelementptr %dimension_descriptor, %dimension_descriptor* %243, i32 0, i32 3
  %250 = load i32, i32* %249, align 4
  %251 = mul i32 1, %250
  %252 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %253 = getelementptr [4 x %complex_4], [4 x %complex_4]* %252, i32 0, i32 %248
  %254 = load %complex_4, %complex_4* %253, align 4
  %255 = alloca %complex_4, align 8
  %256 = getelementptr %complex_4, %complex_4* %255, i32 0, i32 0
  %257 = getelementptr %complex_4, %complex_4* %255, i32 0, i32 1
  store float 1.400000e+01, float* %256, align 4
  store float 0.000000e+00, float* %257, align 4
  %258 = load %complex_4, %complex_4* %255, align 4
  %259 = alloca %complex_4, align 8
  store %complex_4 %254, %complex_4* %259, align 4
  %260 = getelementptr %complex_4, %complex_4* %259, i32 0, i32 0
  %261 = load float, float* %260, align 4
  %262 = alloca %complex_4, align 8
  store %complex_4 %258, %complex_4* %262, align 4
  %263 = getelementptr %complex_4, %complex_4* %262, i32 0, i32 0
  %264 = load float, float* %263, align 4
  %265 = alloca %complex_4, align 8
  store %complex_4 %254, %complex_4* %265, align 4
  %266 = getelementptr %complex_4, %complex_4* %265, i32 0, i32 1
  %267 = load float, float* %266, align 4
  %268 = alloca %complex_4, align 8
  store %complex_4 %258, %complex_4* %268, align 4
  %269 = getelementptr %complex_4, %complex_4* %268, i32 0, i32 1
  %270 = load float, float* %269, align 4
  %271 = fcmp une float %261, %264
  %272 = fcmp une float %267, %270
  %273 = and i1 %271, %272
  br i1 %273, label %then24, label %else25

then24:                                           ; preds = %ifcont22
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @6, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont26

else25:                                           ; preds = %ifcont22
  br label %ifcont26

ifcont26:                                         ; preds = %else25, %then24
  %iftmp27 = phi i32 [ 1, %then24 ], [ 2, %else25 ]
  store i32 0, i32* %i, align 4
  br label %loop.head28

loop.head28:                                      ; preds = %loop.body29, %ifcont26
  %274 = load i32, i32* %i, align 4
  %275 = add i32 %274, 1
  %276 = icmp sle i32 %275, 3
  br i1 %276, label %loop.body29, label %loop.end30

loop.body29:                                      ; preds = %loop.head28
  %277 = load i32, i32* %i, align 4
  %278 = add i32 %277, 1
  store i32 %278, i32* %i, align 4
  %279 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %280 = load i32, i32* %i, align 4
  %281 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %279, i32 0, i32 0
  %282 = getelementptr %dimension_descriptor, %dimension_descriptor* %281, i32 0, i32 1
  %283 = load i32, i32* %282, align 4
  %284 = sub i32 %280, %283
  %285 = mul i32 1, %284
  %286 = add i32 0, %285
  %287 = getelementptr %dimension_descriptor, %dimension_descriptor* %281, i32 0, i32 3
  %288 = load i32, i32* %287, align 4
  %289 = mul i32 1, %288
  %290 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %291 = getelementptr [4 x %complex_4], [4 x %complex_4]* %290, i32 0, i32 %286
  %292 = getelementptr %array, %array* %a, i32 0, i32 2
  %293 = load i32, i32* %i, align 4
  %294 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %292, i32 0, i32 0
  %295 = getelementptr %dimension_descriptor, %dimension_descriptor* %294, i32 0, i32 1
  %296 = load i32, i32* %295, align 4
  %297 = sub i32 %293, %296
  %298 = mul i32 1, %297
  %299 = add i32 0, %298
  %300 = getelementptr %dimension_descriptor, %dimension_descriptor* %294, i32 0, i32 3
  %301 = load i32, i32* %300, align 4
  %302 = mul i32 1, %301
  %303 = getelementptr %array, %array* %a, i32 0, i32 0
  %304 = getelementptr [3 x %complex_4], [3 x %complex_4]* %303, i32 0, i32 %299
  %305 = load %complex_4, %complex_4* %304, align 4
  %306 = alloca %complex_4, align 8
  %307 = getelementptr %complex_4, %complex_4* %306, i32 0, i32 0
  %308 = getelementptr %complex_4, %complex_4* %306, i32 0, i32 1
  store float 1.000000e+01, float* %307, align 4
  store float 0.000000e+00, float* %308, align 4
  %309 = load %complex_4, %complex_4* %306, align 4
  %310 = alloca %complex_4, align 8
  store %complex_4 %305, %complex_4* %310, align 4
  %311 = alloca %complex_4, align 8
  store %complex_4 %309, %complex_4* %311, align 4
  %312 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_sub(%complex_4* %310, %complex_4* %311, %complex_4* %312)
  %313 = load %complex_4, %complex_4* %312, align 4
  store %complex_4 %313, %complex_4* %291, align 4
  br label %loop.head28

loop.end30:                                       ; preds = %loop.head28
  %314 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %315 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %314, i32 0, i32 0
  %316 = getelementptr %dimension_descriptor, %dimension_descriptor* %315, i32 0, i32 1
  %317 = load i32, i32* %316, align 4
  %318 = sub i32 1, %317
  %319 = mul i32 1, %318
  %320 = add i32 0, %319
  %321 = getelementptr %dimension_descriptor, %dimension_descriptor* %315, i32 0, i32 3
  %322 = load i32, i32* %321, align 4
  %323 = mul i32 1, %322
  %324 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %325 = getelementptr [4 x %complex_4], [4 x %complex_4]* %324, i32 0, i32 %320
  %326 = load %complex_4, %complex_4* %325, align 4
  %327 = alloca %complex_4, align 8
  %328 = getelementptr %complex_4, %complex_4* %327, i32 0, i32 0
  %329 = getelementptr %complex_4, %complex_4* %327, i32 0, i32 1
  store float 1.000000e+00, float* %328, align 4
  store float 0.000000e+00, float* %329, align 4
  %330 = load %complex_4, %complex_4* %327, align 4
  %331 = alloca %complex_4, align 8
  store %complex_4 %326, %complex_4* %331, align 4
  %332 = getelementptr %complex_4, %complex_4* %331, i32 0, i32 0
  %333 = load float, float* %332, align 4
  %334 = alloca %complex_4, align 8
  store %complex_4 %330, %complex_4* %334, align 4
  %335 = getelementptr %complex_4, %complex_4* %334, i32 0, i32 0
  %336 = load float, float* %335, align 4
  %337 = alloca %complex_4, align 8
  store %complex_4 %326, %complex_4* %337, align 4
  %338 = getelementptr %complex_4, %complex_4* %337, i32 0, i32 1
  %339 = load float, float* %338, align 4
  %340 = alloca %complex_4, align 8
  store %complex_4 %330, %complex_4* %340, align 4
  %341 = getelementptr %complex_4, %complex_4* %340, i32 0, i32 1
  %342 = load float, float* %341, align 4
  %343 = fcmp une float %333, %336
  %344 = fcmp une float %339, %342
  %345 = and i1 %343, %344
  br i1 %345, label %then31, label %else32

then31:                                           ; preds = %loop.end30
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @7, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont33

else32:                                           ; preds = %loop.end30
  br label %ifcont33

ifcont33:                                         ; preds = %else32, %then31
  %iftmp34 = phi i32 [ 1, %then31 ], [ 2, %else32 ]
  %346 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %347 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %346, i32 0, i32 0
  %348 = getelementptr %dimension_descriptor, %dimension_descriptor* %347, i32 0, i32 1
  %349 = load i32, i32* %348, align 4
  %350 = sub i32 2, %349
  %351 = mul i32 1, %350
  %352 = add i32 0, %351
  %353 = getelementptr %dimension_descriptor, %dimension_descriptor* %347, i32 0, i32 3
  %354 = load i32, i32* %353, align 4
  %355 = mul i32 1, %354
  %356 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %357 = getelementptr [4 x %complex_4], [4 x %complex_4]* %356, i32 0, i32 %352
  %358 = load %complex_4, %complex_4* %357, align 4
  %359 = alloca %complex_4, align 8
  %360 = getelementptr %complex_4, %complex_4* %359, i32 0, i32 0
  %361 = getelementptr %complex_4, %complex_4* %359, i32 0, i32 1
  store float 2.000000e+00, float* %360, align 4
  store float 0.000000e+00, float* %361, align 4
  %362 = load %complex_4, %complex_4* %359, align 4
  %363 = alloca %complex_4, align 8
  store %complex_4 %358, %complex_4* %363, align 4
  %364 = getelementptr %complex_4, %complex_4* %363, i32 0, i32 0
  %365 = load float, float* %364, align 4
  %366 = alloca %complex_4, align 8
  store %complex_4 %362, %complex_4* %366, align 4
  %367 = getelementptr %complex_4, %complex_4* %366, i32 0, i32 0
  %368 = load float, float* %367, align 4
  %369 = alloca %complex_4, align 8
  store %complex_4 %358, %complex_4* %369, align 4
  %370 = getelementptr %complex_4, %complex_4* %369, i32 0, i32 1
  %371 = load float, float* %370, align 4
  %372 = alloca %complex_4, align 8
  store %complex_4 %362, %complex_4* %372, align 4
  %373 = getelementptr %complex_4, %complex_4* %372, i32 0, i32 1
  %374 = load float, float* %373, align 4
  %375 = fcmp une float %365, %368
  %376 = fcmp une float %371, %374
  %377 = and i1 %375, %376
  br i1 %377, label %then35, label %else36

then35:                                           ; preds = %ifcont33
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont37

else36:                                           ; preds = %ifcont33
  br label %ifcont37

ifcont37:                                         ; preds = %else36, %then35
  %iftmp38 = phi i32 [ 1, %then35 ], [ 2, %else36 ]
  %378 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %379 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %378, i32 0, i32 0
  %380 = getelementptr %dimension_descriptor, %dimension_descriptor* %379, i32 0, i32 1
  %381 = load i32, i32* %380, align 4
  %382 = sub i32 3, %381
  %383 = mul i32 1, %382
  %384 = add i32 0, %383
  %385 = getelementptr %dimension_descriptor, %dimension_descriptor* %379, i32 0, i32 3
  %386 = load i32, i32* %385, align 4
  %387 = mul i32 1, %386
  %388 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %389 = getelementptr [4 x %complex_4], [4 x %complex_4]* %388, i32 0, i32 %384
  %390 = load %complex_4, %complex_4* %389, align 4
  %391 = alloca %complex_4, align 8
  %392 = getelementptr %complex_4, %complex_4* %391, i32 0, i32 0
  %393 = getelementptr %complex_4, %complex_4* %391, i32 0, i32 1
  store float 3.000000e+00, float* %392, align 4
  store float 0.000000e+00, float* %393, align 4
  %394 = load %complex_4, %complex_4* %391, align 4
  %395 = alloca %complex_4, align 8
  store %complex_4 %390, %complex_4* %395, align 4
  %396 = getelementptr %complex_4, %complex_4* %395, i32 0, i32 0
  %397 = load float, float* %396, align 4
  %398 = alloca %complex_4, align 8
  store %complex_4 %394, %complex_4* %398, align 4
  %399 = getelementptr %complex_4, %complex_4* %398, i32 0, i32 0
  %400 = load float, float* %399, align 4
  %401 = alloca %complex_4, align 8
  store %complex_4 %390, %complex_4* %401, align 4
  %402 = getelementptr %complex_4, %complex_4* %401, i32 0, i32 1
  %403 = load float, float* %402, align 4
  %404 = alloca %complex_4, align 8
  store %complex_4 %394, %complex_4* %404, align 4
  %405 = getelementptr %complex_4, %complex_4* %404, i32 0, i32 1
  %406 = load float, float* %405, align 4
  %407 = fcmp une float %397, %400
  %408 = fcmp une float %403, %406
  %409 = and i1 %407, %408
  br i1 %409, label %then39, label %else40

then39:                                           ; preds = %ifcont37
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @9, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont41

else40:                                           ; preds = %ifcont37
  br label %ifcont41

ifcont41:                                         ; preds = %else40, %then39
  %iftmp42 = phi i32 [ 1, %then39 ], [ 2, %else40 ]
  %410 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %411 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %410, i32 0, i32 0
  %412 = getelementptr %dimension_descriptor, %dimension_descriptor* %411, i32 0, i32 1
  %413 = load i32, i32* %412, align 4
  %414 = sub i32 4, %413
  %415 = mul i32 1, %414
  %416 = add i32 0, %415
  %417 = getelementptr %dimension_descriptor, %dimension_descriptor* %411, i32 0, i32 3
  %418 = load i32, i32* %417, align 4
  %419 = mul i32 1, %418
  %420 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %421 = getelementptr [4 x %complex_4], [4 x %complex_4]* %420, i32 0, i32 %416
  %422 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %423 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %422, i32 0, i32 0
  %424 = getelementptr %dimension_descriptor, %dimension_descriptor* %423, i32 0, i32 1
  %425 = load i32, i32* %424, align 4
  %426 = sub i32 1, %425
  %427 = mul i32 1, %426
  %428 = add i32 0, %427
  %429 = getelementptr %dimension_descriptor, %dimension_descriptor* %423, i32 0, i32 3
  %430 = load i32, i32* %429, align 4
  %431 = mul i32 1, %430
  %432 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %433 = getelementptr [4 x %complex_4], [4 x %complex_4]* %432, i32 0, i32 %428
  %434 = load %complex_4, %complex_4* %433, align 4
  %435 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %436 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %435, i32 0, i32 0
  %437 = getelementptr %dimension_descriptor, %dimension_descriptor* %436, i32 0, i32 1
  %438 = load i32, i32* %437, align 4
  %439 = sub i32 2, %438
  %440 = mul i32 1, %439
  %441 = add i32 0, %440
  %442 = getelementptr %dimension_descriptor, %dimension_descriptor* %436, i32 0, i32 3
  %443 = load i32, i32* %442, align 4
  %444 = mul i32 1, %443
  %445 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %446 = getelementptr [4 x %complex_4], [4 x %complex_4]* %445, i32 0, i32 %441
  %447 = load %complex_4, %complex_4* %446, align 4
  %448 = alloca %complex_4, align 8
  store %complex_4 %434, %complex_4* %448, align 4
  %449 = alloca %complex_4, align 8
  store %complex_4 %447, %complex_4* %449, align 4
  %450 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_add(%complex_4* %448, %complex_4* %449, %complex_4* %450)
  %451 = load %complex_4, %complex_4* %450, align 4
  %452 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %453 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %452, i32 0, i32 0
  %454 = getelementptr %dimension_descriptor, %dimension_descriptor* %453, i32 0, i32 1
  %455 = load i32, i32* %454, align 4
  %456 = sub i32 3, %455
  %457 = mul i32 1, %456
  %458 = add i32 0, %457
  %459 = getelementptr %dimension_descriptor, %dimension_descriptor* %453, i32 0, i32 3
  %460 = load i32, i32* %459, align 4
  %461 = mul i32 1, %460
  %462 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %463 = getelementptr [4 x %complex_4], [4 x %complex_4]* %462, i32 0, i32 %458
  %464 = load %complex_4, %complex_4* %463, align 4
  %465 = alloca %complex_4, align 8
  store %complex_4 %451, %complex_4* %465, align 4
  %466 = alloca %complex_4, align 8
  store %complex_4 %464, %complex_4* %466, align 4
  %467 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_add(%complex_4* %465, %complex_4* %466, %complex_4* %467)
  %468 = load %complex_4, %complex_4* %467, align 4
  %469 = getelementptr %array, %array* %a, i32 0, i32 2
  %470 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %469, i32 0, i32 0
  %471 = getelementptr %dimension_descriptor, %dimension_descriptor* %470, i32 0, i32 1
  %472 = load i32, i32* %471, align 4
  %473 = sub i32 1, %472
  %474 = mul i32 1, %473
  %475 = add i32 0, %474
  %476 = getelementptr %dimension_descriptor, %dimension_descriptor* %470, i32 0, i32 3
  %477 = load i32, i32* %476, align 4
  %478 = mul i32 1, %477
  %479 = getelementptr %array, %array* %a, i32 0, i32 0
  %480 = getelementptr [3 x %complex_4], [3 x %complex_4]* %479, i32 0, i32 %475
  %481 = load %complex_4, %complex_4* %480, align 4
  %482 = alloca %complex_4, align 8
  store %complex_4 %468, %complex_4* %482, align 4
  %483 = alloca %complex_4, align 8
  store %complex_4 %481, %complex_4* %483, align 4
  %484 = alloca %complex_4, align 8
  call void (%complex_4*, %complex_4*, %complex_4*, ...) @_lfortran_complex_add(%complex_4* %482, %complex_4* %483, %complex_4* %484)
  %485 = load %complex_4, %complex_4* %484, align 4
  store %complex_4 %485, %complex_4* %421, align 4
  %486 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %487 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %486, i32 0, i32 0
  %488 = getelementptr %dimension_descriptor, %dimension_descriptor* %487, i32 0, i32 1
  %489 = load i32, i32* %488, align 4
  %490 = sub i32 4, %489
  %491 = mul i32 1, %490
  %492 = add i32 0, %491
  %493 = getelementptr %dimension_descriptor, %dimension_descriptor* %487, i32 0, i32 3
  %494 = load i32, i32* %493, align 4
  %495 = mul i32 1, %494
  %496 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %497 = getelementptr [4 x %complex_4], [4 x %complex_4]* %496, i32 0, i32 %492
  %498 = load %complex_4, %complex_4* %497, align 4
  %499 = alloca %complex_4, align 8
  %500 = getelementptr %complex_4, %complex_4* %499, i32 0, i32 0
  %501 = getelementptr %complex_4, %complex_4* %499, i32 0, i32 1
  store float 1.700000e+01, float* %500, align 4
  store float 0.000000e+00, float* %501, align 4
  %502 = load %complex_4, %complex_4* %499, align 4
  %503 = alloca %complex_4, align 8
  store %complex_4 %498, %complex_4* %503, align 4
  %504 = getelementptr %complex_4, %complex_4* %503, i32 0, i32 0
  %505 = load float, float* %504, align 4
  %506 = alloca %complex_4, align 8
  store %complex_4 %502, %complex_4* %506, align 4
  %507 = getelementptr %complex_4, %complex_4* %506, i32 0, i32 0
  %508 = load float, float* %507, align 4
  %509 = alloca %complex_4, align 8
  store %complex_4 %498, %complex_4* %509, align 4
  %510 = getelementptr %complex_4, %complex_4* %509, i32 0, i32 1
  %511 = load float, float* %510, align 4
  %512 = alloca %complex_4, align 8
  store %complex_4 %502, %complex_4* %512, align 4
  %513 = getelementptr %complex_4, %complex_4* %512, i32 0, i32 1
  %514 = load float, float* %513, align 4
  %515 = fcmp une float %505, %508
  %516 = fcmp une float %511, %514
  %517 = and i1 %515, %516
  br i1 %517, label %then43, label %else44

then43:                                           ; preds = %ifcont41
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont45

else44:                                           ; preds = %ifcont41
  br label %ifcont45

ifcont45:                                         ; preds = %else44, %then43
  %iftmp46 = phi i32 [ 1, %then43 ], [ 2, %else44 ]
  %518 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %519 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %518, i32 0, i32 0
  %520 = getelementptr %dimension_descriptor, %dimension_descriptor* %519, i32 0, i32 1
  %521 = load i32, i32* %520, align 4
  %522 = sub i32 4, %521
  %523 = mul i32 1, %522
  %524 = add i32 0, %523
  %525 = getelementptr %dimension_descriptor, %dimension_descriptor* %519, i32 0, i32 3
  %526 = load i32, i32* %525, align 4
  %527 = mul i32 1, %526
  %528 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %529 = getelementptr [4 x %complex_4], [4 x %complex_4]* %528, i32 0, i32 %524
  %530 = getelementptr %array, %array* %a, i32 0, i32 2
  %531 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %530, i32 0, i32 0
  %532 = getelementptr %dimension_descriptor, %dimension_descriptor* %531, i32 0, i32 1
  %533 = load i32, i32* %532, align 4
  %534 = sub i32 1, %533
  %535 = mul i32 1, %534
  %536 = add i32 0, %535
  %537 = getelementptr %dimension_descriptor, %dimension_descriptor* %531, i32 0, i32 3
  %538 = load i32, i32* %537, align 4
  %539 = mul i32 1, %538
  %540 = getelementptr %array, %array* %a, i32 0, i32 0
  %541 = getelementptr [3 x %complex_4], [3 x %complex_4]* %540, i32 0, i32 %536
  %542 = load %complex_4, %complex_4* %541, align 4
  store %complex_4 %542, %complex_4* %529, align 4
  %543 = getelementptr %array.0, %array.0* %b, i32 0, i32 2
  %544 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %543, i32 0, i32 0
  %545 = getelementptr %dimension_descriptor, %dimension_descriptor* %544, i32 0, i32 1
  %546 = load i32, i32* %545, align 4
  %547 = sub i32 4, %546
  %548 = mul i32 1, %547
  %549 = add i32 0, %548
  %550 = getelementptr %dimension_descriptor, %dimension_descriptor* %544, i32 0, i32 3
  %551 = load i32, i32* %550, align 4
  %552 = mul i32 1, %551
  %553 = getelementptr %array.0, %array.0* %b, i32 0, i32 0
  %554 = getelementptr [4 x %complex_4], [4 x %complex_4]* %553, i32 0, i32 %549
  %555 = load %complex_4, %complex_4* %554, align 4
  %556 = alloca %complex_4, align 8
  %557 = getelementptr %complex_4, %complex_4* %556, i32 0, i32 0
  %558 = getelementptr %complex_4, %complex_4* %556, i32 0, i32 1
  store float 1.100000e+01, float* %557, align 4
  store float 0.000000e+00, float* %558, align 4
  %559 = load %complex_4, %complex_4* %556, align 4
  %560 = alloca %complex_4, align 8
  store %complex_4 %555, %complex_4* %560, align 4
  %561 = getelementptr %complex_4, %complex_4* %560, i32 0, i32 0
  %562 = load float, float* %561, align 4
  %563 = alloca %complex_4, align 8
  store %complex_4 %559, %complex_4* %563, align 4
  %564 = getelementptr %complex_4, %complex_4* %563, i32 0, i32 0
  %565 = load float, float* %564, align 4
  %566 = alloca %complex_4, align 8
  store %complex_4 %555, %complex_4* %566, align 4
  %567 = getelementptr %complex_4, %complex_4* %566, i32 0, i32 1
  %568 = load float, float* %567, align 4
  %569 = alloca %complex_4, align 8
  store %complex_4 %559, %complex_4* %569, align 4
  %570 = getelementptr %complex_4, %complex_4* %569, i32 0, i32 1
  %571 = load float, float* %570, align 4
  %572 = fcmp une float %562, %565
  %573 = fcmp une float %568, %571
  %574 = and i1 %572, %573
  br i1 %574, label %then47, label %else48

then47:                                           ; preds = %ifcont45
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @11, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont49

else48:                                           ; preds = %ifcont45
  br label %ifcont49

ifcont49:                                         ; preds = %else48, %then47
  %iftmp50 = phi i32 [ 1, %then47 ], [ 2, %else48 ]
  store i32 0, i32* %i, align 4
  br label %loop.head51

loop.head51:                                      ; preds = %loop.end55, %ifcont49
  %575 = load i32, i32* %i, align 4
  %576 = add i32 %575, 1
  %577 = icmp sle i32 %576, 2
  br i1 %577, label %loop.body52, label %loop.end56

loop.body52:                                      ; preds = %loop.head51
  %578 = load i32, i32* %i, align 4
  %579 = add i32 %578, 1
  store i32 %579, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %loop.head53

loop.head53:                                      ; preds = %loop.body54, %loop.body52
  %580 = load i32, i32* %j, align 4
  %581 = add i32 %580, 1
  %582 = icmp sle i32 %581, 2
  br i1 %582, label %loop.body54, label %loop.end55

loop.body54:                                      ; preds = %loop.head53
  %583 = load i32, i32* %j, align 4
  %584 = add i32 %583, 1
  store i32 %584, i32* %j, align 4
  %585 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %586 = load i32, i32* %i, align 4
  %587 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %585, i32 0, i32 0
  %588 = getelementptr %dimension_descriptor, %dimension_descriptor* %587, i32 0, i32 1
  %589 = load i32, i32* %588, align 4
  %590 = sub i32 %586, %589
  %591 = mul i32 1, %590
  %592 = add i32 0, %591
  %593 = getelementptr %dimension_descriptor, %dimension_descriptor* %587, i32 0, i32 3
  %594 = load i32, i32* %593, align 4
  %595 = mul i32 1, %594
  %596 = load i32, i32* %j, align 4
  %597 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %585, i32 0, i32 1
  %598 = getelementptr %dimension_descriptor, %dimension_descriptor* %597, i32 0, i32 1
  %599 = load i32, i32* %598, align 4
  %600 = sub i32 %596, %599
  %601 = mul i32 %595, %600
  %602 = add i32 %592, %601
  %603 = getelementptr %dimension_descriptor, %dimension_descriptor* %597, i32 0, i32 3
  %604 = load i32, i32* %603, align 4
  %605 = mul i32 %595, %604
  %606 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %607 = getelementptr [4 x %complex_4], [4 x %complex_4]* %606, i32 0, i32 %602
  %608 = load i32, i32* %i, align 4
  %609 = load i32, i32* %j, align 4
  %610 = add i32 %608, %609
  %611 = add i32 %610, 10
  %612 = sitofp i32 %611 to float
  %613 = alloca %complex_4, align 8
  %614 = getelementptr %complex_4, %complex_4* %613, i32 0, i32 0
  %615 = getelementptr %complex_4, %complex_4* %613, i32 0, i32 1
  store float %612, float* %614, align 4
  store float 0.000000e+00, float* %615, align 4
  %616 = load %complex_4, %complex_4* %613, align 4
  store %complex_4 %616, %complex_4* %607, align 4
  br label %loop.head53

loop.end55:                                       ; preds = %loop.head53
  br label %loop.head51

loop.end56:                                       ; preds = %loop.head51
  %617 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %618 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %617, i32 0, i32 0
  %619 = getelementptr %dimension_descriptor, %dimension_descriptor* %618, i32 0, i32 1
  %620 = load i32, i32* %619, align 4
  %621 = sub i32 1, %620
  %622 = mul i32 1, %621
  %623 = add i32 0, %622
  %624 = getelementptr %dimension_descriptor, %dimension_descriptor* %618, i32 0, i32 3
  %625 = load i32, i32* %624, align 4
  %626 = mul i32 1, %625
  %627 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %617, i32 0, i32 1
  %628 = getelementptr %dimension_descriptor, %dimension_descriptor* %627, i32 0, i32 1
  %629 = load i32, i32* %628, align 4
  %630 = sub i32 1, %629
  %631 = mul i32 %626, %630
  %632 = add i32 %623, %631
  %633 = getelementptr %dimension_descriptor, %dimension_descriptor* %627, i32 0, i32 3
  %634 = load i32, i32* %633, align 4
  %635 = mul i32 %626, %634
  %636 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %637 = getelementptr [4 x %complex_4], [4 x %complex_4]* %636, i32 0, i32 %632
  %638 = load %complex_4, %complex_4* %637, align 4
  %639 = alloca %complex_4, align 8
  %640 = getelementptr %complex_4, %complex_4* %639, i32 0, i32 0
  %641 = getelementptr %complex_4, %complex_4* %639, i32 0, i32 1
  store float 1.200000e+01, float* %640, align 4
  store float 0.000000e+00, float* %641, align 4
  %642 = load %complex_4, %complex_4* %639, align 4
  %643 = alloca %complex_4, align 8
  store %complex_4 %638, %complex_4* %643, align 4
  %644 = getelementptr %complex_4, %complex_4* %643, i32 0, i32 0
  %645 = load float, float* %644, align 4
  %646 = alloca %complex_4, align 8
  store %complex_4 %642, %complex_4* %646, align 4
  %647 = getelementptr %complex_4, %complex_4* %646, i32 0, i32 0
  %648 = load float, float* %647, align 4
  %649 = alloca %complex_4, align 8
  store %complex_4 %638, %complex_4* %649, align 4
  %650 = getelementptr %complex_4, %complex_4* %649, i32 0, i32 1
  %651 = load float, float* %650, align 4
  %652 = alloca %complex_4, align 8
  store %complex_4 %642, %complex_4* %652, align 4
  %653 = getelementptr %complex_4, %complex_4* %652, i32 0, i32 1
  %654 = load float, float* %653, align 4
  %655 = fcmp une float %645, %648
  %656 = fcmp une float %651, %654
  %657 = and i1 %655, %656
  br i1 %657, label %then57, label %else58

then57:                                           ; preds = %loop.end56
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @12, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont59

else58:                                           ; preds = %loop.end56
  br label %ifcont59

ifcont59:                                         ; preds = %else58, %then57
  %iftmp60 = phi i32 [ 1, %then57 ], [ 2, %else58 ]
  %658 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %659 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %658, i32 0, i32 0
  %660 = getelementptr %dimension_descriptor, %dimension_descriptor* %659, i32 0, i32 1
  %661 = load i32, i32* %660, align 4
  %662 = sub i32 1, %661
  %663 = mul i32 1, %662
  %664 = add i32 0, %663
  %665 = getelementptr %dimension_descriptor, %dimension_descriptor* %659, i32 0, i32 3
  %666 = load i32, i32* %665, align 4
  %667 = mul i32 1, %666
  %668 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %658, i32 0, i32 1
  %669 = getelementptr %dimension_descriptor, %dimension_descriptor* %668, i32 0, i32 1
  %670 = load i32, i32* %669, align 4
  %671 = sub i32 2, %670
  %672 = mul i32 %667, %671
  %673 = add i32 %664, %672
  %674 = getelementptr %dimension_descriptor, %dimension_descriptor* %668, i32 0, i32 3
  %675 = load i32, i32* %674, align 4
  %676 = mul i32 %667, %675
  %677 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %678 = getelementptr [4 x %complex_4], [4 x %complex_4]* %677, i32 0, i32 %673
  %679 = load %complex_4, %complex_4* %678, align 4
  %680 = alloca %complex_4, align 8
  %681 = getelementptr %complex_4, %complex_4* %680, i32 0, i32 0
  %682 = getelementptr %complex_4, %complex_4* %680, i32 0, i32 1
  store float 1.300000e+01, float* %681, align 4
  store float 0.000000e+00, float* %682, align 4
  %683 = load %complex_4, %complex_4* %680, align 4
  %684 = alloca %complex_4, align 8
  store %complex_4 %679, %complex_4* %684, align 4
  %685 = getelementptr %complex_4, %complex_4* %684, i32 0, i32 0
  %686 = load float, float* %685, align 4
  %687 = alloca %complex_4, align 8
  store %complex_4 %683, %complex_4* %687, align 4
  %688 = getelementptr %complex_4, %complex_4* %687, i32 0, i32 0
  %689 = load float, float* %688, align 4
  %690 = alloca %complex_4, align 8
  store %complex_4 %679, %complex_4* %690, align 4
  %691 = getelementptr %complex_4, %complex_4* %690, i32 0, i32 1
  %692 = load float, float* %691, align 4
  %693 = alloca %complex_4, align 8
  store %complex_4 %683, %complex_4* %693, align 4
  %694 = getelementptr %complex_4, %complex_4* %693, i32 0, i32 1
  %695 = load float, float* %694, align 4
  %696 = fcmp une float %686, %689
  %697 = fcmp une float %692, %695
  %698 = and i1 %696, %697
  br i1 %698, label %then61, label %else62

then61:                                           ; preds = %ifcont59
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @13, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont63

else62:                                           ; preds = %ifcont59
  br label %ifcont63

ifcont63:                                         ; preds = %else62, %then61
  %iftmp64 = phi i32 [ 1, %then61 ], [ 2, %else62 ]
  %699 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %700 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %699, i32 0, i32 0
  %701 = getelementptr %dimension_descriptor, %dimension_descriptor* %700, i32 0, i32 1
  %702 = load i32, i32* %701, align 4
  %703 = sub i32 2, %702
  %704 = mul i32 1, %703
  %705 = add i32 0, %704
  %706 = getelementptr %dimension_descriptor, %dimension_descriptor* %700, i32 0, i32 3
  %707 = load i32, i32* %706, align 4
  %708 = mul i32 1, %707
  %709 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %699, i32 0, i32 1
  %710 = getelementptr %dimension_descriptor, %dimension_descriptor* %709, i32 0, i32 1
  %711 = load i32, i32* %710, align 4
  %712 = sub i32 1, %711
  %713 = mul i32 %708, %712
  %714 = add i32 %705, %713
  %715 = getelementptr %dimension_descriptor, %dimension_descriptor* %709, i32 0, i32 3
  %716 = load i32, i32* %715, align 4
  %717 = mul i32 %708, %716
  %718 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %719 = getelementptr [4 x %complex_4], [4 x %complex_4]* %718, i32 0, i32 %714
  %720 = load %complex_4, %complex_4* %719, align 4
  %721 = alloca %complex_4, align 8
  %722 = getelementptr %complex_4, %complex_4* %721, i32 0, i32 0
  %723 = getelementptr %complex_4, %complex_4* %721, i32 0, i32 1
  store float 1.300000e+01, float* %722, align 4
  store float 0.000000e+00, float* %723, align 4
  %724 = load %complex_4, %complex_4* %721, align 4
  %725 = alloca %complex_4, align 8
  store %complex_4 %720, %complex_4* %725, align 4
  %726 = getelementptr %complex_4, %complex_4* %725, i32 0, i32 0
  %727 = load float, float* %726, align 4
  %728 = alloca %complex_4, align 8
  store %complex_4 %724, %complex_4* %728, align 4
  %729 = getelementptr %complex_4, %complex_4* %728, i32 0, i32 0
  %730 = load float, float* %729, align 4
  %731 = alloca %complex_4, align 8
  store %complex_4 %720, %complex_4* %731, align 4
  %732 = getelementptr %complex_4, %complex_4* %731, i32 0, i32 1
  %733 = load float, float* %732, align 4
  %734 = alloca %complex_4, align 8
  store %complex_4 %724, %complex_4* %734, align 4
  %735 = getelementptr %complex_4, %complex_4* %734, i32 0, i32 1
  %736 = load float, float* %735, align 4
  %737 = fcmp une float %727, %730
  %738 = fcmp une float %733, %736
  %739 = and i1 %737, %738
  br i1 %739, label %then65, label %else66

then65:                                           ; preds = %ifcont63
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @14, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont67

else66:                                           ; preds = %ifcont63
  br label %ifcont67

ifcont67:                                         ; preds = %else66, %then65
  %iftmp68 = phi i32 [ 1, %then65 ], [ 2, %else66 ]
  %740 = getelementptr %array.1, %array.1* %c, i32 0, i32 2
  %741 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %740, i32 0, i32 0
  %742 = getelementptr %dimension_descriptor, %dimension_descriptor* %741, i32 0, i32 1
  %743 = load i32, i32* %742, align 4
  %744 = sub i32 2, %743
  %745 = mul i32 1, %744
  %746 = add i32 0, %745
  %747 = getelementptr %dimension_descriptor, %dimension_descriptor* %741, i32 0, i32 3
  %748 = load i32, i32* %747, align 4
  %749 = mul i32 1, %748
  %750 = getelementptr [2 x %dimension_descriptor], [2 x %dimension_descriptor]* %740, i32 0, i32 1
  %751 = getelementptr %dimension_descriptor, %dimension_descriptor* %750, i32 0, i32 1
  %752 = load i32, i32* %751, align 4
  %753 = sub i32 2, %752
  %754 = mul i32 %749, %753
  %755 = add i32 %746, %754
  %756 = getelementptr %dimension_descriptor, %dimension_descriptor* %750, i32 0, i32 3
  %757 = load i32, i32* %756, align 4
  %758 = mul i32 %749, %757
  %759 = getelementptr %array.1, %array.1* %c, i32 0, i32 0
  %760 = getelementptr [4 x %complex_4], [4 x %complex_4]* %759, i32 0, i32 %755
  %761 = load %complex_4, %complex_4* %760, align 4
  %762 = alloca %complex_4, align 8
  %763 = getelementptr %complex_4, %complex_4* %762, i32 0, i32 0
  %764 = getelementptr %complex_4, %complex_4* %762, i32 0, i32 1
  store float 1.400000e+01, float* %763, align 4
  store float 0.000000e+00, float* %764, align 4
  %765 = load %complex_4, %complex_4* %762, align 4
  %766 = alloca %complex_4, align 8
  store %complex_4 %761, %complex_4* %766, align 4
  %767 = getelementptr %complex_4, %complex_4* %766, i32 0, i32 0
  %768 = load float, float* %767, align 4
  %769 = alloca %complex_4, align 8
  store %complex_4 %765, %complex_4* %769, align 4
  %770 = getelementptr %complex_4, %complex_4* %769, i32 0, i32 0
  %771 = load float, float* %770, align 4
  %772 = alloca %complex_4, align 8
  store %complex_4 %761, %complex_4* %772, align 4
  %773 = getelementptr %complex_4, %complex_4* %772, i32 0, i32 1
  %774 = load float, float* %773, align 4
  %775 = alloca %complex_4, align 8
  store %complex_4 %765, %complex_4* %775, align 4
  %776 = getelementptr %complex_4, %complex_4* %775, i32 0, i32 1
  %777 = load float, float* %776, align 4
  %778 = fcmp une float %768, %771
  %779 = fcmp une float %774, %777
  %780 = and i1 %778, %779
  br i1 %780, label %then69, label %else70

then69:                                           ; preds = %ifcont67
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @15, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont71

else70:                                           ; preds = %ifcont67
  br label %ifcont71

ifcont71:                                         ; preds = %else70, %then69
  %iftmp72 = phi i32 [ 1, %then69 ], [ 2, %else70 ]
  ret i32 0
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

declare void @_lfortran_complex_sub(%complex_4*, %complex_4*, %complex_4*, ...)

declare void @_lfortran_complex_add(%complex_4*, %complex_4*, %complex_4*, ...)

