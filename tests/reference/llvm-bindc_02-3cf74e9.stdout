; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i16*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32, i32 }

@queries = global void* null
@x = global %array* null
@0 = private unnamed_addr constant [11 x i8] c"%lld %lld\0A\00", align 1
@1 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1
@2 = private unnamed_addr constant [11 x i8] c"%lld %lld\0A\00", align 1
@3 = private unnamed_addr constant [11 x i8] c"%lld %lld\0A\00", align 1

define void @_lpython_main_program() {
.entry:
  %0 = load void*, void** @queries, align 8
  %1 = alloca %array, align 8
  %2 = alloca %dimension_descriptor, align 8
  %3 = getelementptr %array, %array* %1, i32 0, i32 2
  store %dimension_descriptor* %2, %dimension_descriptor** %3, align 8
  %4 = getelementptr %array, %array* %1, i32 0, i32 4
  store i32 1, i32* %4, align 4
  store %array* %1, %array** @x, align 8
  %5 = getelementptr %array, %array* %1, i32 0, i32 0
  %6 = getelementptr %array, %array* %1, i32 0, i32 2
  %7 = load %dimension_descriptor*, %dimension_descriptor** %6, align 8
  %8 = bitcast void* %0 to i16*
  store i16* %8, i16** %5, align 8
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %7, i32 0
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 1
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 2
  %12 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %7, i32 0
  %13 = getelementptr %dimension_descriptor, %dimension_descriptor* %12, i32 0, i32 3
  store i32 1, i32* %10, align 4
  store i32 1, i32* %11, align 4
  store i32 1, i32* %13, align 4
  %14 = load void*, void** @queries, align 8
  %15 = ptrtoint void* %14 to i64
  %16 = load %array*, %array** @x, align 8
  %17 = getelementptr %array, %array* %16, i32 0, i32 0
  %18 = load i16*, i16** %17, align 8
  %19 = ptrtoint i16* %18 to i64
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @0, i32 0, i32 0), i64 %15, i64 %19)
  call void @f()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @f() {
.entry:
  %call_arg_value_ptr = alloca i16*, align 8
  %y = alloca %array, align 8
  %0 = getelementptr %array, %array* %y, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %y, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %y, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 3
  store i32 1, i32* %8, align 4
  store i32 1, i32* %9, align 4
  store i32 2, i32* %10, align 4
  %12 = load i32, i32* %10, align 4
  %13 = load i32, i32* %9, align 4
  %14 = sub i32 %12, %13
  %15 = add i32 %14, 1
  store i32 %15, i32* %11, align 4
  %16 = alloca i32, align 4
  store i32 2, i32* %16, align 4
  %17 = getelementptr %array, %array* %y, i32 0, i32 0
  %18 = load i32, i32* %16, align 4
  %19 = alloca i16, i32 %18, align 2
  store i16* %19, i16** %17, align 8
  %yptr1 = alloca %array*, align 8
  %yq = alloca void*, align 8
  %20 = getelementptr %array, %array* %y, i32 0, i32 2
  %21 = load %dimension_descriptor*, %dimension_descriptor** %20, align 8
  %22 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %21, i32 0
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 1, %24
  %26 = mul i32 1, %25
  %27 = add i32 0, %26
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 1, %29
  %31 = getelementptr %array, %array* %y, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = getelementptr inbounds i16, i16* %32, i32 %27
  store i16 1, i16* %33, align 2
  %34 = getelementptr %array, %array* %y, i32 0, i32 2
  %35 = load %dimension_descriptor*, %dimension_descriptor** %34, align 8
  %36 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %35, i32 0
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = sub i32 2, %38
  %40 = mul i32 1, %39
  %41 = add i32 0, %40
  %42 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = mul i32 1, %43
  %45 = getelementptr %array, %array* %y, i32 0, i32 0
  %46 = load i16*, i16** %45, align 8
  %47 = getelementptr inbounds i16, i16* %46, i32 %41
  store i16 2, i16* %47, align 2
  store %array* %y, %array** %yptr1, align 8
  %48 = load %array*, %array** %yptr1, align 8
  %49 = getelementptr %array, %array* %48, i32 0, i32 2
  %50 = load %dimension_descriptor*, %dimension_descriptor** %49, align 8
  %51 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %50, i32 0
  %52 = getelementptr %dimension_descriptor, %dimension_descriptor* %51, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = sub i32 1, %53
  %55 = mul i32 1, %54
  %56 = add i32 0, %55
  %57 = getelementptr %dimension_descriptor, %dimension_descriptor* %51, i32 0, i32 3
  %58 = load i32, i32* %57, align 4
  %59 = mul i32 1, %58
  %60 = getelementptr %array, %array* %48, i32 0, i32 0
  %61 = load i16*, i16** %60, align 8
  %62 = getelementptr inbounds i16, i16* %61, i32 %56
  %63 = load i16, i16* %62, align 2
  %64 = load %array*, %array** %yptr1, align 8
  %65 = getelementptr %array, %array* %64, i32 0, i32 2
  %66 = load %dimension_descriptor*, %dimension_descriptor** %65, align 8
  %67 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %66, i32 0
  %68 = getelementptr %dimension_descriptor, %dimension_descriptor* %67, i32 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = sub i32 2, %69
  %71 = mul i32 1, %70
  %72 = add i32 0, %71
  %73 = getelementptr %dimension_descriptor, %dimension_descriptor* %67, i32 0, i32 3
  %74 = load i32, i32* %73, align 4
  %75 = mul i32 1, %74
  %76 = getelementptr %array, %array* %64, i32 0, i32 0
  %77 = load i16*, i16** %76, align 8
  %78 = getelementptr inbounds i16, i16* %77, i32 %72
  %79 = load i16, i16* %78, align 2
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1, i32 0, i32 0), i16 %63, i16 %79)
  %80 = getelementptr %array, %array* %y, i32 0, i32 0
  %81 = load i16*, i16** %80, align 8
  store i16* %81, i16** %call_arg_value_ptr, align 8
  %82 = ptrtoint i16** %call_arg_value_ptr to i64
  %83 = load %array*, %array** %yptr1, align 8
  %84 = getelementptr %array, %array* %83, i32 0, i32 0
  %85 = load i16*, i16** %84, align 8
  %86 = ptrtoint i16* %85 to i64
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i32 0, i32 0), i64 %82, i64 %86)
  %87 = load void*, void** %yq, align 8
  %88 = alloca %array, align 8
  %89 = alloca %dimension_descriptor, align 8
  %90 = getelementptr %array, %array* %88, i32 0, i32 2
  store %dimension_descriptor* %89, %dimension_descriptor** %90, align 8
  %91 = getelementptr %array, %array* %88, i32 0, i32 4
  store i32 1, i32* %91, align 4
  store %array* %88, %array** %yptr1, align 8
  %92 = getelementptr %array, %array* %88, i32 0, i32 0
  %93 = getelementptr %array, %array* %88, i32 0, i32 2
  %94 = load %dimension_descriptor*, %dimension_descriptor** %93, align 8
  %95 = bitcast void* %87 to i16*
  store i16* %95, i16** %92, align 8
  %96 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %94, i32 0
  %97 = getelementptr %dimension_descriptor, %dimension_descriptor* %96, i32 0, i32 1
  %98 = getelementptr %dimension_descriptor, %dimension_descriptor* %96, i32 0, i32 2
  %99 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %94, i32 0
  %100 = getelementptr %dimension_descriptor, %dimension_descriptor* %99, i32 0, i32 3
  store i32 1, i32* %97, align 4
  store i32 1, i32* %98, align 4
  store i32 1, i32* %100, align 4
  %101 = load void*, void** %yq, align 8
  %102 = ptrtoint void* %101 to i64
  %103 = load %array*, %array** %yptr1, align 8
  %104 = getelementptr %array, %array* %103, i32 0, i32 0
  %105 = load i16*, i16** %104, align 8
  %106 = ptrtoint i16* %105 to i64
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @3, i32 0, i32 0), i64 %102, i64 %106)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_printf(i8*, ...)

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}
