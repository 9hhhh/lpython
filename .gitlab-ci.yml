image: registry.gitlab.com/certik/ci-images:conda_base

stages:
  - tarball
  - build

before_script:
  - ci/version.sh
  - lfortran_version=$(<version)

prepare tarball:
  stage: tarball
  image: registry.gitlab.com/certik/ci-images:conda_base
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - sudo apt-get update
    - sudo apt-get install -yq --no-install-recommends git wget ssh openjdk-9-jre-headless
    - export CLASSPATH="$HOME/antlr-4.7-complete.jar:$CLASSPATH"
    - (cd; wget http://www.antlr.org/download/antlr-4.7-complete.jar)
    - ./build0.sh
    - python setup.py sdist
    - ci/upload_tarball.sh
  artifacts:
    paths:
      - dist/*
    when: always
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://gitlab.com/lfortran/packages/testing/tree/$CI_COMMIT_REF_NAME

# Test full dependencies when a C compiler is available and used for linking
full:
  stage: build
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - conda install python=3.7 pytest llvmlite
    - pip install antlr4-python3-runtime
    - sudo apt-get update
    - sudo apt-get install -yq --no-install-recommends gcc gfortran gcc-multilib cmake make
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - python setup.py install
    - cd ..
    - rm -r liblfort lfortran-${lfortran_version}
    - rm lfort
    - ./build1.sh
    - sudo cp liblfort.a /usr/lib/
    - py.test --pyargs liblfort
    - python show_ast.py
    - lfort examples/expr2.f90
    - ./a.out
    - ./test_lfort_cmdline
    - ./test_lfort

# Test minimal dependencies needed to get things to run. No gcc or clang
# compilers, just the linker `ld` and the musl C library.
minimal:
  stage: build
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - conda install python=3.7 pytest llvmlite
    - pip install antlr4-python3-runtime
    - sudo apt-get update
    - sudo apt-get install -yq --no-install-recommends musl-dev binutils gcc libc6-dev
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - python setup.py install
    - cd ..
    - rm -r liblfort lfortran-${lfortran_version}
    - rm lfort
    - ./build1.sh
    - sudo apt-get remove -yq gcc libc6-dev
    - sudo apt-get autoremove -yq
    - py.test --pyargs liblfort
    - lfort --ld-musl examples/expr2.f90
    - ./a.out

# Test Jupyter notebooks
jupyter:
  stage: build
  script:
    - export PATH="$HOME/conda_root/bin:$PATH"
    - conda install python=3.7 pytest llvmlite jupyter
    - pip install antlr4-python3-runtime
    - sudo apt-get update
    - sudo apt-get install -yq --no-install-recommends gcc gfortran gcc-multilib cmake make git
    - tar xzf dist/lfortran-${lfortran_version}.tar.gz
    - cd lfortran-${lfortran_version}
    - pip install .
    - cd ..
    - rm -r liblfort lfortran-${lfortran_version}
    - ./build1.sh
    - (git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/lfortran/fortran_kernel && cd fortran_kernel && git checkout v0.1.0 && pip install . && cd .. && rm -r fortran_kernel)
    - python -m fortran_kernel.install
    - jupyter kernelspec list --json
    - cd nb
    - jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=60 --output Demo_out.ipynb Demo.ipynb
  artifacts:
    paths:
      - nb/Demo_out.ipynb
    when: always
